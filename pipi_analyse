#!/hadron/knippsch/Enthought/Canopy_64bit/User/bin/python
##!/usr/bin/python
################################################################################
#
# Author: Christian Jost (jost@hiskp.uni-bonn.de)
# Date:   Februar 2015
#
# Copyright (C) 2015 Christian Jost
# 
# This program is free software: you can redistribute it and/or modify it under 
# the terms of the GNU General Public License as published by the Free Software 
# Foundation, either version 3 of the License, or (at your option) any later 
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with tmLQCD. If not, see <http://www.gnu.org/licenses/>.
#
################################################################################
#
# Function: This is the start of the eta/eta' analysis program
#
# For informations on input parameters see the description of the function.
#
################################################################################

import numpy as np
import matplotlib
matplotlib.use('QT4Agg') # has to be imported before the next lines
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages

import analysis as ana

def read_data(path, pilist, pipilist, datafolder, nsamples, readnew=True):
    verbose = False
    if not verbose:
        print("reading data")
    if readnew:
        if verbose:
            print("reading files:")
            for f in pilist:
                print(f)
            for f in pipilist:
                print(f)
        pipi_data = ana.create_corr_matrix(nsamples, path, pipilist)
        corr = ana.read_data_ascii("".join((path, pilist[0])))
        pi_data = ana.sym_and_boot(corr, nsamples)
        ana.write_data(pipi_data, "%s/pipi_data.npy" % (datafolder))
        ana.write_data(pi_data, "%s/pi_data.npy" % (datafolder))
    else:
        if verbose:
            print("reading numpy data")
        pipi_data = ana.read_data("%s/pipi_data.npy" % (datafolder))
        pi_data = ana.read_data("%s/pi_data.npy" % (datafolder))
    if verbose:
        print("data shapes")
        print(pi_data.shape)
        print(pipi_data.shape)
    return pi_data, pipi_data

def fit_single_pion(pi_data, lo, up, fmin, pars, pionfit, tmin, lattice, d,
                    label, plotfolder, datafolder, newfit=True):
    """Fit the correlation function for the single pion.

    Args:
        pi_data: the correlation function
        lo, up: lower and upper bound for the fitranges
        fmin: minimal number of fitpoints in the fitranges
        pars: the start parameters for the fit
        pionfit: fit function for the correlator
        tmin: minimum x to plot
        lattice: the name of the lattice
        d: the total momentum vector
        label: label for the plots
        plotfolder: path to save the plots
        datafolder: path to save the fit results
        newfit: do the fit, if false read data from disk

    Returns:
        pi: the resulting parameters from the fit
        chi2: the chi^2 of each fit
        pvals: the p-values of each fit
        fitranges: the used fitranges
    """
    verbose = False
    d2 = np.dot(d, d)
    fname = "%s/fit_results_%s_TP%d.npz" % (datafolder, lattice, d2)
    if not verbose:
        print("fitting single pion")
    if newfit:
        if verbose:
            print("new fit")
            print(pi_data.shape)
        pionranges = np.asarray(ana.set_fit_interval(pi_data, lo, up, fmin))
        if verbose:
            print(pionranges.shape)
        pi, chi2, pvals = ana.genfit(pi_data, pionranges, pionfit, pars, tmin,
                                    lattice, d, label, plotfolder, "pion_mass",
                                    verbose=verbose)
        ana.write_fitresults(fname, pionranges, pi, chi2, pvals)
    else:
        if verbose:
            ("reading fit data")
        pionranges, pi, chi2, pvals = ana.read_fitresults(fname)

    if verbose:
        print("fit infos")
        for p in pi:
            print(p.shape)
    return pi, chi2, pvals, pionranges

def calc_gevp(data, s, tmin, d2, datafolder, solvenew=True):
    """Shift the correlation function matrix and solve the gevp.

    Args:
        data: correlation function matrix
        s: number of timeslices to shift
        tmin: t0 for the GEVP solver
        d2: total momentum squared
        datafolder: folder where to store numpy data

    Returns:
        gevp: solution of the GEVP
        mgevp: mean of the solution of the GEVP
        dgevp: std of the solution of the GEVP
    """
    verbose=False
    if solvenew:
        if verbose:
            print("shift %d" % s)
        data_shift = ana.shift_corr_matrix(data, s)

        if verbose:
            print("shifted data")
            print(data_shift.shape)

        ## GEVP
        gevp = ana.calculate_gevp(data_shift, tmin)
        ana.write_data(gevp, "%s/pipi_corr_mat_TP%d_s%d.npy" % (datafolder, d2, s))
    else:
        if verbose:
            print("read shifted data")
        gevp = ana.read_data("%s/pipi_corr_mat_TP%d_s%d.npy" % (datafolder, d2, s))
    mgevp, dgevp = ana.calc_error(gevp)
    
    if verbose:
        print("gevp shapes")
        print(gevp.shape)
        print(mgevp.shape)
        print(dgevp.shape)

    return gevp, mgevp, dgevp

def analyse(lattice="A40.24", d=np.asarray([0., 0., 0.])):
    """pi-pi scattering analysis for I=2.

    Args:
        lattice: a string with the lattice name.
        d: A numpy array with the total momentum.
    """
    ## define main variables
    verbose=True
    nsamples = 1500 # number of bootstrap samples
    L, T = 24, 48
    tmin = 1 # for the GEVP
    path = "/hiskp2/correlators/A40.24_L24_T48_beta190_mul0040_musig150_mudel190_kappa1632700/ev120/liuming/"
    datafolder = "./raw_data/"
    plotfolder = "./plots/"
    gmax = 5 # maximum index of the gevp
    mpi = 0.1446

    ## other variables
    # total momentum
    d2 = np.dot(d, d)
    # time extend of the symmetrized data
    T2 = int(T/2)+1
    # file list
    pipilist = ["pipi_pipi_A1_corr_TP%d_%d%d" % (d2, x, y) for x in range(gmax)
                for y in range(gmax)]
    pilist = ["pi_corr_p%d.dat" % d2 ]
    # fit functions
    massfit = lambda p,t : p
    pionfit = lambda p, t: 0.5*p[0]*p[0]*(np.exp(-p[1]*t)+np.exp(-p[1]*(T2-t)))
    ratiofit = lambda p, t, e : p[0]*(np.cosh(p[1]*(t-T-1))+\
                                np.sinh(p[1]*(t-T2-1))/(np.tanh(2*e*(t-T2-1))))
    # label for the plots
    label_pion = ["single pion", "time", r"am$_{\pi}$(t)", "data", ""]
    label_ratio = ["ratio", "time", "R(t)", "data", ""]
    # lower and upper fit ranges for the different correlators
    lo_pion = [8]
    up_pion = [T2]
    lo_ratio = [5, 5, 4, 4, 4]
    up_ratio = [17, 14, 10, 9, 9]
    # minimal number of points in each fit
    fmin = 4
    # x and y limits for plots
    xlims = [(0,25), (0,25), (0,25), (0,25), (0,25)]
    ylims = [(0.2, 0.4), (0.5, 0.8), (0.7, 0.9), (0.8, 1.2), (1., 1.5)]
    # initial parameters for the fits
    par_pion = [0.2]
    par_ratio = [2., 0.06]

    ## read in data
    pi_data, pipi_data = read_data(path, pilist, pipilist, datafolder,
                                   nsamples, False)

    ## calculate effective mass of the pion
    pimass, pimmass, pidmass = ana.compute_mass(pi_data)
    ## fit single pion effective mass function
    pi, pichi2, pipvals, pionranges = fit_single_pion(pimass, lo_pion, up_pion, 
        fmin, par_pion, massfit, tmin, lattice, d, label_pion, plotfolder,
        datafolder, False)
    # calculate statistic and systematic error of the pion
    # TODO(CJ): hijacking lattice name for distinguishing different plots
    mpi, dmpi_stat, dmpi_syst, weights_mpi = ana.sys_error(pi, pipvals, d, 
                                                 "pion_"+lattice, path=plotfolder)
    #print("single pion")
    #print(len(weights_mpi))
    #for p in weights_mpi:
    #    print(d.shape)
    print("mpi with errors")
    for p, dp, ddp in zip(mpi, dmpi_stat, dmpi_syst):
        print(p, dp, ddp)

    for s in xrange(2):
        print("shift %d" % s)
        ## GEVP
        gevp, mgevp, dgevp=calc_gevp(pipi_data, s, tmin, d2, datafolder, False)

        ## build ratio to determine dE
        ratio, mratio, dratio=ana.simple_ratio_subtract(gevp, pi_data, pi_data)
        #print("ratio shape", ratio.shape)

        ## plot ratio
        #pfit = PdfPages("%s/pipi_ratio_shift%d.pdf" % (plotfolder, s)) 
        #tlist = np.linspace(0., ratio.shape[1], ratio.shape[1], endpoint=False)
        #for i in xrange(ratio.shape[2]):
        #    print("principal correlator %d" % i)
        #    ana.plot_data(tlist[1:], ratio[0,1:,i], dratio[1:,i], pfit)
        #pfit.close()

        ## fit ratio
        fname = "%s/fit_ratio_%s_TP%d_s%d.npz" % (datafolder, lattice, d2, s)
        fitnew = False
        if fitnew:
            ratioranges = ana.set_fit_interval(ratio, lo_ratio, up_ratio, fmin)
            rres, rchi2, rpvals = ana.genfit_comb(ratio, ratioranges, pionranges,
                ratiofit, par_ratio, pi, tmin, lattice, label_ratio, plotfolder,
                "ratio_s%d" % s, verbose=True)
            ana.write_fitresults(fname, ratioranges, rres, rchi2, rpvals)
        else:
            ratioranges, rres, rchi2, rpvals = ana.read_fitresults(fname)
        #print("rres")
        #print(len(rres))
        #for p in rres:
        #    print(len(p))
        #    for q in p:
        #        print(q.shape)
        #print("rpvals")
        #print(len(rpvals))
        #for p in rpvals:
        #    print(len(p))
        #    for q in p:
        #        print(q.shape)

        # calculate statistic and systematic error for delta E
        dE, ddE_stat, ddE_syst, weights_dE = ana.sys_error(rres, rpvals, d, "ratio_s%d_%s" % (s, lattice), par=1, path=plotfolder)
        #print("weights_dE")
        #print(len(weights_dE))
        #for p in weights_dE:
        #    print(len(p))
        #    for q in p:
        #        print(q.shape)
        print("dE with errors")
        for p, dp, ddp in zip(dE, ddE_stat, ddE_syst):
            for q, dq, ddq in zip(p, dp, ddp):
                print(q, dq, ddq)
        #print(len(dE))
        #for p in dE:
        #    print(len(p))
        #    for q in p:
        #        print(q)

        # calculate scattering length
        anew = False
        fname = "%s/scat_len_%s_TP%d_s%d.npz" % (datafolder, lattice, d2, s)
        if anew:
            a, weights_a = ana.calc_scat_length(rres, pi, weights_dE, weights_mpi, L)
            # since a is a list of lists of arrays, hack the fit results
            # routines to save
            ana.write_fitresults(fname, np.zeros((10,)), a, weights_a, a)
        else:
            # since a is a list of lists of arrays, hack the fit results
            # routines to read
            _u, _a, weights_a, a = ana.read_fitresults(fname)
        #print("a")
        #print(len(a))
        #for p in a:
        #    print(len(p))
        #    for q in p:
        #        print(q.shape)
        #print("weights_a")
        #print(len(weights_a))
        #for p in weights_a:
        #    print(len(p))
        #    for q in p:
        #        print(q.shape)

        # statistical error for scattering length
        a_pipi, da_stat, da_syst = ana.sys_error_der(a, weights_a, d, lattice, path=plotfolder)
        #print("a_pipi")
        #print(len(a_pipi))
        #for p in a_pipi:
        #    print(len(p))
        #    for q in p:
        #        print(q.shape)
        print("a_pipi with errors")
        for p, dp, ddp in zip(a_pipi, da_stat, da_syst):
            for q, dq, ddq in zip(p, dp, ddp):
                print(q, dq, ddq)

        # calculate mpi * a
        ampinew = True
        fname = "%s/ampi_%s_TP%d_s%d.npz" % (datafolder, lattice, d2, s)
        if ampinew:
            ampi, weights_ampi = ana.calc_scat_length(a, pi, weights_a, weights_mpi, L, pars=(None, 0))
            ana.write_fitresults(fname, np.zeros((10,)), ampi, weights_ampi, ampi)
        else:
            _u, _ampi, weights_ampi, ampi = ana.read_fitresults(fname)

        # statistical and systematic error for a*mpi
        am_pipi, dam_stat, dam_syst = ana.sys_error_der(ampi, weights_ampi, d, lattice, path=plotfolder)
        #print("a_pipi * m_pi")
        #print(len(ampi))
        #for p in ampi:
        #    print(len(p))
        #    for q in p:
        #        print(q.shape)
        print("a_pipi * m_pi with errors")
        for p, dp, ddp in zip(am_pipi, dam_stat, dam_syst):
            for q, dq, ddq in zip(p, dp, ddp):
                print(q, dq, ddq)
    return

def main():
    d0 = np.array([0., 0., 0.]) # total momentum of the system
    d1 = np.array([0., 0., 1.]) # total momentum of the system
    lattices=["A30.32", "A40.20", "A40.24", "A40.32", "A60.24",\
              "A80.24", "A100.24"]
    analyse()

# make this script importable, according to the Google Python Style Guide
if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
