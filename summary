#!/hadron/knippsch/Enthought/Canopy_64bit/User/bin/python
################################################################################
#
# Author: Christian Jost (jost@hiskp.uni-bonn.de)
# Date:   Februar 2015
#
# Copyright (C) 2015 Christian Jost
# 
# This program is free software: you can redistribute it and/or modify it under 
# the terms of the GNU General Public License as published by the Free Software 
# Foundation, either version 3 of the License, or (at your option) any later 
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with tmLQCD. If not, see <http://www.gnu.org/licenses/>.
#
################################################################################
#
# Function: A programm to print the results of the Luescher analysis 
#
# For informations on input parameters see the description of the function.
#
################################################################################

import sys
import numpy as np
import matplotlib
matplotlib.use('Agg') # has to be imported before the next lines
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages

import analysis2 as ana

def main():

    # parse the input file
    if len(sys.argv) < 2:
        ens = ana.LatticeEnsemble.parse("A40.24.ini")
    else:
        ens = ana.LatticeEnsemble.parse(sys.argv[1])

    # get data from input file
    lat = ens.name()
    latA = ens.get_data("namea")
    latB = ens.get_data("nameb")
    latD = ens.get_data("named")
    strangeA = ens.get_data("strangea")
    strangeB = ens.get_data("strangeb")
    strangeD = ens.get_data("stranged")
    #quark = ens.get_data("quark")
    datadir = ens.get_data("datadir") 
    plotdir = ens.get_data("plotdir") 
    d2 = ens.get_data("d2")
    
    header = "# m_k +/- d_stat(m_k) + d_sys(m_k) -d_sys(m_k) delE +/- \
    d_stat(del_E) + d_sys(del_E) -d_sys(del_E) a0 +/- d_stat(a0) + d_sys(a0) \
    -d_sys(a0) mka0 +/- d_stat(mka0) + d_sys(mka0) -d_sys(mka0)" 
    print(datadir)
    print(plotdir)
    print("Summary for the A-ensembles")
    Aresults = np.zeros((len(strangeA),len(latA),16))
    for i,s in enumerate(strangeA):
      print(s)
      for j,a in enumerate(latA):
        #print(datadir+a+"/"+s)
        ## single particle fit
        #print("read single particle fit")
        #kcorr = ana.Correlators.read("%s/corr_k_%s.npy" % (datadir, lat))
        kfit = ana.FitResult.read("%s%s/%s/fit_k_%s.npz" % (datadir, a,s, a))
        m = kfit.data_for_plot(1)

        # read ratio
        #print("\n\nread ratio")
        ratiofit = ana.FitResult.read("%s%s/%s/fit_kk_TP%d_%s.npz" % (datadir, a, s, d2, a))
        dE = ratiofit.data_for_plot(1)
        
        # Read in results of scattering length
        #print("Read results for scattering length")
        a0 = ana.FitResult.read("%s%s/%s/scat_len_TP%d_%s.npz" % (datadir, a, s, d2, a))
        a0 = a0.data_for_plot()
        
        # Read m_a0
        mult_obs = ana.FitResult.read("%s%s/%s/mk_akk_%s.npz" % (datadir, a, s, a))
        m_a0 = mult_obs.data_for_plot()
        ens = np.vstack((m,dE,a0,m_a0)).reshape(16)
        Aresults[i,j] = ens
    Aresults = Aresults.reshape((len(latA)*len(strangeA),16))
    print Aresults
    fmt = " ".join(['%1.4e']*16)
    np.savetxt("kk_scat_b1.90.dat",Aresults, fmt=fmt, header=header)

    #print("Summary for the B-ensembles")
    #Bresults = np.zeros((len(strangeB),len(latB),16))
    #for i,s in enumerate(strangeB):
    #  print(s)
    #  for j,a in enumerate(latB):
    #    #print(datadir+a+"/"+s)
    #    ## single particle fit
    #    #print("read single particle fit")
    #    #kcorr = ana.Correlators.read("%s/corr_k_%s.npy" % (datadir, lat))
    #    kfit = ana.FitResult.read("%s%s/%s/fit_k_%s.npz" % (datadir, a,s, a))
    #    m = kfit.data_for_plot(1)

    #    # read ratio
    #    #print("\n\nread ratio")
    #    ratiofit = ana.FitResult.read("%s%s/%s/fit_kk_TP%d_%s.npz" % (datadir, a, s, d2, a))
    #    dE = ratiofit.data_for_plot(1)
    #    
    #    # Read in results of scattering length
    #    #print("Read results for scattering length")
    #    a0 = ana.FitResult.read("%s%s/%s/scat_len_TP%d_%s.npz" % (datadir, a, s, d2, a))
    #    a0 = a0.data_for_plot()
    #    
    #    # Read m_a0
    #    mult_obs = ana.FitResult.read("%s%s/%s/mk_akk_%s.npz" % (datadir, a, s, a))
    #    m_a0 = mult_obs.data_for_plot()
    #    ens = np.vstack((m,dE,a0,m_a0)).reshape(16)
    #    Bresults[i,j] = ens
    #Bresults = Bresults.reshape((len(latB)*len(strangeB),16))
    #print Bresults
    #fmt = " ".join(['%1.4e']*16)
    #np.savetxt("kk_scat_b1.95.dat",Bresults, fmt=fmt, header=header)

    #print("Summary for the D-ensembles")
    #Dresults = np.zeros((len(strangeD),len(latD),16))
    #for i,s in enumerate(strangeD):
    #  print(s)
    #  for j,a in enumerate(latD):
    #    #print(datadir+a+"/"+s)
    #    ## single particle fit
    #    #print("read single particle fit")
    #    #kcorr = ana.Correlators.read("%s/corr_k_%s.npy" % (datadir, lat))
    #    kfit = ana.FitResult.read("%s%s/%s/fit_k_%s.npz" % (datadir, a,s, a))
    #    m = kfit.data_for_plot(1)

    #    # read ratio
    #    #print("\n\nread ratio")
    #    ratiofit = ana.FitResult.read("%s%s/%s/fit_kk_TP%d_%s.npz" % (datadir, a, s, d2, a))
    #    dE = ratiofit.data_for_plot(1)
    #    
    #    # Read in results of scattering length
    #    #print("Read results for scattering length")
    #    a0 = ana.FitResult.read("%s%s/%s/scat_len_TP%d_%s.npz" % (datadir, a, s, d2, a))
    #    a0 = a0.data_for_plot()
    #    
    #    # Read m_a0
    #    mult_obs = ana.FitResult.read("%s%s/%s/mk_akk_%s.npz" % (datadir, a, s, a))
    #    m_a0 = mult_obs.data_for_plot()
    #    ens = np.vstack((m,dE,a0,m_a0)).reshape(16)
    #    Dresults[i,j] = ens
    #Dresults = Dresults.reshape((len(latD)*len(strangeD),16))
    #print Dresults
    #fmt = " ".join(['%1.4e']*16)
    #np.savetxt("kk_scat_b2.10.dat",Dresults, fmt=fmt, header=header)

    header = "# m_k +/- d_stat(m_k) + d_sys(m_k) -d_sys(m_k) mka0 +/- d_stat(mka0) + d_sys(mka0) -d_sys(mka0)" 
    Aresults = np.zeros((len(latA),8))
    for j,a in enumerate(latA):
      #print(datadir+a+"/"+s)
      ## single particle fit
      #print("read single particle fit")
      #kcorr = ana.Correlators.read("%s/corr_k_%s.npy" % (datadir, lat))
      kfit = ana.FitResult.read("%s%s/match_k_%s.npz" % (datadir, a, a))
      m = kfit.data_for_plot(1)

      # Read m_a0
      mult_obs = ana.FitResult.read("%s%s/match_mk_akk_%s.npz" % (datadir, a, a))
      m_a0 = mult_obs.data_for_plot()
      ens = np.vstack((m,m_a0)).reshape(8)
      Aresults[j] = ens

       
        #------------ Read in OS fk-data for each ensemble --------------------
        # numpy array holding 3 strange quark masses, 3 kaon masses and 3 values
        # fk
        OS_fk = np.loadtxt(src_path+"OSfk_"+ens[:-1]+".dat", skiprows=1,
            usecols=(1,2,3,4,5,6))
        # delete everything with wrong light quark mass
        lqm = float(a[1:-3])*0.0001
        OS_fk = OS_fk[np.logical_not(OS_fk[:,0]!=lqm)]

        # ----------------- linear interpolation of fk ------------------------ 
        # interpolate fk to amu_s value
        OS_fk_y = OS_fk[np.logical_and(OS_fk[:,1]>0.015,OS_fk[:,1]<0.02),4]
        OS_fk_y = np.atleast_2d(OS_fk_y)
        OS_fk_x = OS_fk[np.logical_and(OS_fk[:,1]>0.015,OS_fk[:,1]<0.02),1]
        fk_coeff = ana.ipol_lin(OS_fk_y,OS_fk_x)
        fk_coeff_match = ana.eval_lin(fk_coeff, b_roots_p1) 
        #print("lin. i-pol.:\tf_K = %f +/- %f" % (fk_coeff_match[0], 0))
        fk_ipol[idx] = np.array([fk_coeff_match[0],0])

    Aresults = Aresults.reshape((len(latA),8))
    print Aresults
    fmt = " ".join(['%1.4e']*8)
    np.savetxt("kk_scat_b1.90_match_b1.95.dat",Aresults, fmt=fmt, header=header)

# make this script importable, according to the Google Python Style Guide
if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass

