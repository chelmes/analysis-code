#!/hadron/knippsch/Enthought/Canopy_64bit/User/bin/python

import sys
import numpy as np

import analysis2 as ana

def main():
    # parse the input file
    if len(sys.argv) < 2:
        ens = ana.LatticeEnsemble.parse("kk_I1_TP0_A40.24.ini")
    else:
        ens = ana.LatticeEnsemble.parse(sys.argv[1])

    # read settings
    readsingledata = False 
    readsinglefit = False
    plotsingle = True
    readtwodata = False
    readtwofit = False
    plottwo = True

    # get data from input file
    prefix = ens.get_data("path")
    print prefix
    lat = ens.name()
    nboot = ens.get_data("nboot")
    datadir = ens.get_data("datadir")
    plotdir = ens.get_data("plotdir")
    gmax = ens.get_data("gmax")
    d2 = ens.get_data("d2")
    try:
        debug = ens.get_data("debug")
    except KeyError:
        debug = 0
    T = ens.T()
    T2 = ens.T2()
    addT = np.ones((nboot,)) * T
    addT2 = np.ones((nboot,)) * T2

    # single particle correlator
    print("read single particle corrs")
    files = ["%s/k_charged_p%d.dat" % (datadir, d) for d in range(1)]
    if readsingledata == False:
        picorr = ana.Correlators(files, matrix=False)
        picorr.sym_and_boot(nboot)
        picorr.save("%s/corr_k_%s.npy" % (datadir, lat))
    else:
        picorr = ana.Correlators.read("%s/corr_k_%s.npy" % (datadir, lat))

    fit_single = ana.LatticeFit(0, True)
    start_single = [1., 0.3]
    if readsinglefit == False:
        print("fitting")
        pifit = fit_single.fit(start_single, picorr, [9,T2], corrid="ek",
            add=addT, min_size=6)
        pifit.save("%s/fit_k_%s.npz" % (datadir, lat))
    else:
        pifit = ana.FitResult.read("%s/fit_k_%s.npz" % (datadir, lat))
    pifit.print_data(1)

    # plot the result
    if plotsingle:
        print("plotting")
        plotter = ana.LatticePlot("%s/fit_k_%s.pdf" % (plotdir, lat))
        plotter.set_env(ylog=True)
        label = ["single particle", "t", "C(t)", "kaon"]
        plotter.plot(picorr, label, pifit, fit_single, add=addT, debug=2)
        plotter.new_file("%s/hist_fit_k_%s.pdf" % (plotdir, lat))
        label = ["kaon energy", "E$_\k$/a", "E$_\k$"]
        plotter.histogram(pifit, label, 1)
        del plotter


if __name__ == '__main__':
    try:
        print("starting")
        main()
    except KeyboardInterrupt:
        pass
