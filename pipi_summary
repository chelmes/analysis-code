#!/hadron/knippsch/Enthought/Canopy_64bit/User/bin/python
##!/usr/bin/python
################################################################################
#
# Author: Christian Jost (jost@hiskp.uni-bonn.de)
# Date:   Februar 2015
#
# Copyright (C) 2015 Christian Jost
# 
# This program is free software: you can redistribute it and/or modify it under 
# the terms of the GNU General Public License as published by the Free Software 
# Foundation, either version 3 of the License, or (at your option) any later 
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with tmLQCD. If not, see <http://www.gnu.org/licenses/>.
#
################################################################################
#
# Function: This is the start of the eta/eta' analysis program
#
# For informations on input parameters see the description of the function.
#
################################################################################

import os
import glob
import numpy as np
import matplotlib
matplotlib.use('Agg') # has to be imported before the next lines
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages

import analysis2 as ana

def tolatex3(data):
    if len(data) == 2:
        rstr = "$%.3f(%.0f)$" % (data[0], data[1]*1e3)
    else:
        rstr = "$%.3f(%.0f)(^{+%1.0f}_{-%1.0f})$" % (data[0], data[1]*1e3,
            data[2]*1e3, data[3]*1e3)
    return rstr

def tolatex4(data):
    if len(data) == 2:
        rstr = "$%.4f(%.0f)$" % (data[0], data[1]*1e4)
    else:
        rstr = "$%.4f(%.0f)(^{+%1.0f}_{-%1.0f})$" % (data[0], data[1]*1e4,
            data[2]*1e4, data[3]*1e4)
    return rstr

def tostd3(data):
    if len(data) == 2:
        rstr = "$%.3f(%.0f)$" % (data[0], data[1]*1e3)
    else:
        rstr = "$%.3f(%.0f)(+%1.0f -%1.0f)$" % (data[0], data[1]*1e3,
            data[2]*1e3, data[3]*1e3)
    return rstr

def tostd4(data):
    if len(data) == 2:
        rstr = "%.4f(%.0f)" % (data[0], data[1]*1e4)
    else:
        rstr = "%.4f(%.0f)(+%1.0f -%1.0f)$" % (data[0], data[1]*1e4,
            data[2]*1e4, data[3]*1e4)
    return rstr

class dp(object):
    def __init__(self, y=np.nan, dy=np.nan, dysys=None):
        self.y = y
        self.dy = dy
        self.dysys = np.asarray(dysys) if dysys is not None else None

    def tolatex(self, ftolatex=tolatex3):
        if np.isnan(self.y):
            rstr = ["---"]
        elif self.dysys is None:
            rstr = ftolatex((self.y, self.dy))
        else:
            rstr = ftolatex((self.y, self.dy,
                self.dysys[0], self.dysys[1]))
        return rstr

def wiki_dict():
    """Dictionaries of the pion data from the ETMC wiki."""
    w_pi = {"A30.32": (0.12395, 0.00036, 0.00014, 0.),
            "A40.20": (0.14927, 0.00074, 0.00096, 0.),
            "A40.24": (0.14492, 0.00052, 0.00034, 0.),
            "A40.32": (0.14142, 0.00027, 0.00042, 0.),
            "A60.24": (0.17275, 0.00045, 0.00023, 0.),
            "A80.24": (0.19875, 0.00041, 0.00035, 0.),
            "A100.24": (0.22293, 0.00035, 0.00038, 0.),
            "A80.24s": (0.19880, 0.00046, 0.00053, 0.),
            "A100.24s": (0.22125, 0.00058, 0.00119, 0.),
            "B25.32": (0.10680, 0.00039, 0.00027, 0.),
            "B35.48": (0.12402, 0.00011, 0.00000, 0.),
            "B35.32": (0.12602, 0.00030, 0.00030, 0.),
            "B55.32": (0.15518, 0.00021, 0.00033, 0.),
            "B85.24": (0.19396, 0.00038, 0.00054, 0.),
            "D15.48": (0.06975, 0.00020, 0.00000, 0.),
            "D30.48": (0.09780, 0.00016, 0.00032, 0.),
            "D45.32": (0.12087, 0.00040, 0.00000, 0.)}
    return w_pi

def paper_dE():
    """The values for dE from the paper."""
    p_dE = {"A30.32": (0.0037, 0.0001, 0.0002, 0.0001),
            "A40.20": (0.0179, 0.0005, 0.0001, 0.0002),
            "A40.24": (0.0082, 0.0003, 0.0001, 0.0004),
            "A40.32": (0.0033, 0.0001, 0.0001, 0.0001),
            "A60.24": (0.0076, 0.0002, 0.0001, 0.0001),
            "A80.24": (0.0071, 0.0001, 0.0001, 0.0000),
            "A100.24": (0.0063, 0.0001, 0.0001, 0.0001),
            "A80.24s": (np.nan,)*4,
            "A100.24s": (np.nan,)*4,
            "B25.32": (np.nan,)*4,
            "B35.48": (np.nan,)*4,
            "B35.32": (0.0041, 0.0002, 0.0001, 0.0001),
            "B55.32": (0.0039, 0.0001, 0.0001, 0.0001),
            "B85.24": (0.0085, 0.0001, 0.0001, 0.0000),
            "D15.48": (np.nan,)*4,
            "D30.48": (np.nan,)*4,
            "D45.32": (0.0084, 0.0002, 0.0005, 0.0000)}
    return p_dE

def paper_am():
    """The values for a*mpi from the paper."""
    p_am = {"A30.32": (-0.1325, 0.0042, 0.0042, 0.0069),
            "A40.20": (-0.2024, 0.0044, 0.0020, 0.0011),
            "A40.24": (-0.1640, 0.0054, 0.0088, 0.0017),
            "A40.32": (-0.1553, 0.0048, 0.0031, 0.0035),
            "A60.24": (-0.2165, 0.0038, 0.0027, 0.0023),
            "A80.24": (-0.2622, 0.0033, 0.0008, 0.0009),
            "A100.24": (-0.2938, 0.0033, 0.0008, 0.0030),
            "A80.24s": (np.nan,)*4,
            "A100.24s": (np.nan,)*4,
            "B25.32": (np.nan,)*4,
            "B35.48": (-0.1567, 0.0193, 0.0085, 0.0261),
            "B35.32": (-0.1507, 0.0059, 0.0027, 0.0027),
            "B55.32": (-0.2185, 0.0052, 0.0023, 0.0025),
            "B85.24": (-0.2921, 0.0034, 0.0007, 0.0039),
            "D15.48": (-0.1163, 0.0157, 0.0089, 0.0107),
            "D30.48": (np.nan,)*4,
            "D45.32": (-0.2618, 0.0058, 0.0011, 0.0120)}
    return p_am

def paper_cotd():
    """The values for q*cot(delta) from the paper."""
    p_cd = {"A30.32": (-0.92, 0.03, 0.05, 0.02),
            "A40.20": (-0.71, 0.02, 0.01, 0.01),
            "A40.24": (-0.87, 0.03, 0.01, 0.05),
            "A40.32": (-0.90, 0.03, 0.02, 0.05),
            "A60.24": (-0.79, 0.01, 0.01, 0.01),
            "A80.24": (-0.75, 0.01, 0.00, 0.00),
            "A100.24": (-0.75, 0.01, 0.01, 0.01),
            "A80.24s": (np.nan,)*4,
            "A100.24s": (np.nan,)*4,
            "B25.32": (np.nan,)*4,
            "B35.48": (np.nan,)*4,
            "B35.32": (-0.82, 0.03, 0.02, 0.02),
            "B55.32": (-0.71, 0.02, 0.01, 0.01),
            "B85.24": (-0.66, 0.01, 0.01, 0.00),
            "D15.48": (np.nan,)*4,
            "D30.48": (np.nan,)*4,
            "D45.32": (-0.45, 0.01, 0.02, 0.00)}
    return p_cd

def read_fit(datafolder, lattices, fname="fit_pi.npz", par=1):
    result = []
    print("reading files: %s" % fname)
    for lat in lattices:
        #print("read fit data for %s" % lat)
        # get m_pi data
        data = ana.FitResult.read("%s/%s/%s" % (datafolder, lat, fname))
        data.calc_error()
        result.append(dp(data.error[par][0][0][0], data.error[par][1][0],
            data.error[par][2][0]))
    return result

def read_fit_k(datafolder, lattices, fname="fit_k_%s.npz", par=1):
    result = []
    print("reading files: %s" % fname)
    for lat in lattices:
        #print("read fit data for %s" % lat)
        _f = fname % lat
        fsort = lambda x: os.path.basename(x).split("_")[1]
        # get folder and sort
        sdirs = glob.glob(os.path.join(datafolder, lat, "strange_*"))
        sdirs = sorted(sdirs, key=fsort)
        # get m_k data
        tmp = []
        for sm in sdirs:
            path = os.path.join(sm, _f)
            try:
                data = ana.FitResult.read(path)
            except IOError:
                continue
            data.calc_error()
            tmp.append(dp(data.error[par][0][0][0], data.error[par][1][0],
                data.error[par][2][0]))
        result.append(tmp)
    return result

def print_summary(datafolder, lattices, d2=0, kfolder=None):
    """Print a summary of the lattices given.

    Args:
        datafolder: where the raw data is stored
        lattices: list of lattices to work on
    """
    verbose=False
    ## other variables
    filempi = "fit_pi.npz"
    filemk = "fit_k_%s.npz"
    #filedE = "dE_TP%d.npz" % d2
    #filea = "scat_len_TP%d.npz" % d2
    #fileam = "am_pi_TP%d.npz" % d2
    filedE = "fit_pipi_ratio_TP%d.npz" % d2
    filea = "scat_len_ratio_TP%d.npz" % d2
    fileam = "am_pi_ratio_TP%d.npz" % d2
    par_mpi=1
    par_mk=1
    par_dE=1

    #mpi = read_fit(datafolder, lattices, filempi, par=par_mpi)
    #mk = read_fit_k(kfolder, lattices, filemk, par=par_mk)
    dE = read_fit(datafolder, lattices, filedE, par=par_dE)
    a0 = read_fit(datafolder, lattices, filea, par=0)
    a0mpi = read_fit(datafolder, lattices, fileam, par=0)


    #print("M_pi & M_K")
    #for lat, p, k in zip(lattices, mpi, mk):
    #    tmp = ["$%s$"%lat, p.tolatex(tolatex4)]
    #    for _k in k:
    #        tmp.append(_k.tolatex(tolatex4))
    #    for _k in range(3-len(k)):
    #        tmp.append("--")
    #    rstr = " & ".join(tmp)
    #    print(rstr + " \\\\")

    #print("mpi")
    ##w_pi = wiki_dict()
    #print(" & ".join(("ensemble", "data", "reference")))
    #for lat, d in zip(lattices, mpi):
    #    rstr = " & ".join(("$%s$"%lat, d.tolatex(tolatex4)))
    #    #rstr = " & ".join((lat, d.tolatex(tolatex4), tolatex4(w_pi[lat])))
    #    print(rstr + " \\\\")

    #print("dE")
    #p_dE = paper_dE()
    #print(" & ".join(("ensemble", "data", "reference")))
    #for lat, d in zip(lattices, dE):
    #    rstr = " & ".join((lat, d.tolatex(tolatex4), tolatex4(p_dE[lat])))
    #    print(rstr)

    #print("a")
    #print(" & ".join(("ensemble", "data")))
    #for lat, d in zip(lattices, a0):
    #    rstr = " & ".join((lat, d.tolatex(tolatex4)))
    #    print(rstr)
    #
    #print("a * mpi")
    #p_am = paper_am()
    #print(" & ".join(("ensemble", "data", "reference")))
    #for lat, d in zip(lattices, a0mpi):
    #    rstr = " & ".join((lat, d.tolatex(tolatex4), tolatex4(p_am[lat])))
    #    print(rstr)

    print("all")
    print(" & ".join(("ensemble", "dE", "a0", "a0*mpi")))
    for lat, E, a, am in zip(lattices, dE, a0, a0mpi):
        rstr = " & ".join(("$%s$"%lat, E.tolatex(tolatex4), a.tolatex(tolatex3),
            am.tolatex(tolatex3)))
        print(rstr + " \\\\")

    return

def main():
    d0 = np.array([0., 0., 0.]) # total momentum of the system
    #lattices=["A30.32", "A40.20", "A40.24", "A40.32", "A60.24",
    #          "A80.24", "A100.24", "A100.24s",
    #          "B25.32", "B35.32", "B35.48", "B55.32", "B85.24",
    #          "D15.48", "D30.48", "D45.32"]
    lattices=["A30.32", "A40.20", "A40.24", "A40.32", "A60.24",
              "A80.24", "A100.24",
              "B25.32", "B35.32", "B35.48", "B55.32", "B85.24",
              "D15.48", "D30.48", "D45.32"]
    #lattices=["A30.32", "A40.20", "A40.24", "A60.24",
    #          "A80.24", "A100.24", "B25.32", "B35.32", "B35.48",
    #          "B55.32", "B85.24", "D30.48", "D45.32"]
    #lattices=["A30.32", "B85.24", "D15.48"]
    #lattices = ["cA2.09.48", "cA2.30.24", "cA2.60.32"]
    datafolder = "./data/I2/"
    kdatafolder = "/hiskp2/jost/eta_data/"
    print_summary(datafolder, lattices, kfolder=kdatafolder)
    return

# make this script importable, according to the Google Python Style Guide
if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
