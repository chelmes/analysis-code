#!/hadron/knippsch/Enthought/Canopy_64bit/User/bin/python
##!/usr/bin/python
################################################################################
#
# Author: Christian Jost (jost@hiskp.uni-bonn.de)
# Date:   Februar 2015
#
# Copyright (C) 2015 Christian Jost
# 
# This program is free software: you can redistribute it and/or modify it under 
# the terms of the GNU General Public License as published by the Free Software 
# Foundation, either version 3 of the License, or (at your option) any later 
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with tmLQCD. If not, see <http://www.gnu.org/licenses/>.
#
################################################################################
#
# Function: This is the start of the eta/eta' analysis program
#
# For informations on input parameters see the description of the function.
#
################################################################################

import sys
import numpy as np
import matplotlib
matplotlib.use('Agg') # has to be imported before the next lines
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages

import analysis as ana

def wiki_dict():
    """Dictionaries of the pion data from the ETMC wiki."""
    w_pi = {"A30.32": 0.12395,
            "A40.20": 0.14927,
            "A40.24": 0.14492,
            "A40.32": 0.14142,
            "A60.24": 0.17275,
            "A80.24": 0.19875,
            "A100.24": 0.22293,
            "A80.24s": 0.19880,
            "A100.24s": 0.22125,
            "B25.32": 0.10680,
            "B35.48": 0.12402,
            "B35.32": 0.12602,
            "B55.32": 0.15518,
            "B85.24": 0.19396,
            "D15.48": 0.06975,
            "D30.48": 0.09780,
            "D45.32": 0.12087}
    w_dpi_stat = {"A30.32": 0.00036,
            "A40.20": 0.00074,
            "A40.24": 0.00052,
            "A40.32": 0.00027,
            "A60.24": 0.00045,
            "A80.24": 0.00041,
            "A100.24": 0.00035,
            "A80.24s": 0.00046,
            "A100.24s": 0.00058,
            "B25.32": 0.00039,
            "B35.48": 0.00011,
            "B35.32": 0.00030,
            "B55.32": 0.00021,
            "B85.24": 0.00038,
            "D15.48": 0.00020,
            "D30.48": 0.00016,
            "D45.32": 0.00040}
    w_dpi_syst = {"A30.32": 0.00014,
            "A40.20": 0.00096,
            "A40.24": 0.00034,
            "A40.32": 0.00042,
            "A60.24": 0.00023,
            "A80.24": 0.00035,
            "A100.24": 0.00038,
            "A80.24s": 0.00053,
            "A100.24s": 0.00119,
            "B25.32": 0.00027,
            "B35.48": 0.00000,
            "B35.32": 0.00030,
            "B55.32": 0.00033,
            "B85.24": 0.00054,
            "D15.48": 0.00000,
            "D30.48": 0.00032,
            "D45.32": 0.00000}
    return w_pi, w_dpi_stat, w_dpi_syst

def paper_dE():
    """The values for dE from the paper."""
    p_dE = {"A30.32": 0.0037,
            "A40.20": 0.0179,
            "A40.24": 0.0082,
            "A40.32": 0.0033,
            "A60.24": 0.0076,
            "A80.24": 0.0071,
            "A100.24": 0.0063,
            "A80.24s": 0.0000,
            "A100.24s": 0.0000,
            "B25.32": 0.0000,
            "B35.48": 0.0000,
            "B35.32": 0.0041,
            "B55.32": 0.0039,
            "B85.24": 0.0085,
            "D15.48": 0.0000,
            "D30.48": 0.0000,
            "D45.32": 0.0084}
    p_ddE_stat = {"A30.32": 0.0001,
            "A40.20": 0.0005,
            "A40.24": 0.0003,
            "A40.32": 0.0001,
            "A60.24": 0.0002,
            "A80.24": 0.0001,
            "A100.24": 0.0001,
            "A80.24s": 0.0000,
            "A100.24s": 0.0000,
            "B25.32": 0.0000,
            "B35.48": 0.0000,
            "B35.32": 0.0002,
            "B55.32": 0.0001,
            "B85.24": 0.0001,
            "D15.48": 0.0000,
            "D30.48": 0.0000,
            "D45.32": 0.0002}
    p_ddE_syst = {"A30.32": (0.0002, 0.0001),
            "A40.20": (0.0001, 0.0002),
            "A40.24": (0.0001, 0.0004),
            "A40.32": (0.0001, 0.0001),
            "A60.24": (0.0001, 0.0001),
            "A80.24": (0.0001, 0.0000),
            "A100.24": (0.0001, 0.0001),
            "A80.24s": (0.0000, 0.0000),
            "A100.24s": (0.0000, 0.0000),
            "B25.32": (0.0000, 0.0000),
            "B35.48": (0.0000, 0.0000),
            "B35.32": (0.0001, 0.0001),
            "B55.32": (0.0001, 0.0001),
            "B85.24": (0.0001, 0.0000),
            "D15.48": (0.0000, 0.0000),
            "D30.48": (0.0000, 0.0000),
            "D45.32": (0.0005, 0.0000)}
    return p_dE, p_ddE_stat, p_ddE_syst

def paper_am():
    """The values for a*mpi from the paper."""
    p_am = {"A30.32": -0.1325,
            "A40.20": -0.2024,
            "A40.24": -0.1640,
            "A40.32": -0.1553,
            "A60.24": -0.2165,
            "A80.24": -0.2622,
            "A100.24": -0.2938,
            "A80.24s": -0.0000,
            "A100.24s": -0.0000,
            "B25.32": -0.0000,
            "B35.48": -0.1567,
            "B35.32": -0.1507,
            "B55.32": -0.2185,
            "B85.24": -0.2921,
            "D15.48": -0.1163,
            "D30.48": -0.0000,
            "D45.32": -0.2618}
    p_dam_stat = {"A30.32": 0.0042,
            "A40.20": 0.0044,
            "A40.24": 0.0054,
            "A40.32": 0.0048,
            "A60.24": 0.0038,
            "A80.24": 0.0033,
            "A100.24": 0.0033,
            "A80.24s": 0.0000,
            "A100.24s": 0.0000,
            "B25.32": 0.0000,
            "B35.48": 0.0193,
            "B35.32": 0.0059,
            "B55.32": 0.0052,
            "B85.24": 0.0034,
            "D15.48": 0.0157,
            "D30.48": 0.0000,
            "D45.32": 0.0058}
    p_dam_syst = {"A30.32": (0.0042, 0.0069),
            "A40.20": (0.0020, 0.0011),
            "A40.24": (0.0088, 0.0017),
            "A40.32": (0.0031, 0.0035),
            "A60.24": (0.0027, 0.0023),
            "A80.24": (0.0008, 0.0009),
            "A100.24": (0.0008, 0.0030),
            "A80.24s": (0.0000, 0.0000),
            "A100.24s": (0.0000, 0.0000),
            "B25.32": (0.0000, 0.0000),
            "B35.48": (0.0085, 0.0261),
            "B35.32": (0.0027, 0.0027),
            "B55.32": (0.0023, 0.0025),
            "B85.24": (0.0007, 0.0039),
            "D15.48": (0.0089, 0.0107),
            "D30.48": (0.0000, 0.0000),
            "D45.32": (0.0011, 0.0120)}
    return p_am, p_dam_stat, p_dam_syst

def paper_cotd():
    """The values for q*cot(delta) from the paper."""
    p_cd = {"A30.32": -0.92,
            "A40.20": -0.71,
            "A40.24": -0.87,
            "A40.32": -0.90,
            "A60.24": -0.79,
            "A80.24": -0.75,
            "A100.24": -0.75,
            "A80.24s": -0.00,
            "A100.24s": -0.00,
            "B25.32": -0.00,
            "B35.48": -0.00,
            "B35.32": -0.82,
            "B55.32": -0.71,
            "B85.24": -0.66,
            "D15.48": -0.00,
            "D30.48": -0.00,
            "D45.32": -0.45}
    p_dcd_stat = {"A30.32": 0.03,
            "A40.20": 0.02,
            "A40.24": 0.03,
            "A40.32": 0.03,
            "A60.24": 0.01,
            "A80.24": 0.01,
            "A100.24": 0.01,
            "A80.24s": 0.00,
            "A100.24s": 0.00,
            "B25.32": 0.00,
            "B35.48": 0.00,
            "B35.32": 0.03,
            "B55.32": 0.02,
            "B85.24": 0.01,
            "D15.48": 0.00,
            "D30.48": 0.00,
            "D45.32": 0.01}
    p_dcd_syst = {"A30.32": (0.05, 0.02),
            "A40.20": (0.01, 0.01),
            "A40.24": (0.01, 0.05),
            "A40.32": (0.02, 0.05),
            "A60.24": (0.01, 0.01),
            "A80.24": (0.00, 0.00),
            "A100.24": (0.01, 0.01),
            "A80.24s": (0.00, 0.00),
            "A100.24s": (0.00, 0.00),
            "B25.32": (0.00, 0.00),
            "B35.48": (0.00, 0.00),
            "B35.32": (0.02, 0.02),
            "B55.32": (0.01, 0.01),
            "B85.24": (0.01, 0.00),
            "D15.48": (0.00, 0.00),
            "D30.48": (0.00, 0.00),
            "D45.32": (0.02, 0.00)}
    return p_cd, p_dcd_stat, p_dcd_syst

def print_summary(datafolder, plotfolder, lattices, shift=0, 
                  d=np.asarray([0., 0., 0.])):
    """Print a summary of the lattices given.

    Args:
        datafolder: where the raw data is stored
        plotfolder: where to store the plots
        lattices: a list with the lattice name.
        d: A numpy array with the total momentum.
    """
    verbose=False
    ## other variables
    # total momentum
    d2 = np.dot(d, d)
    L = {x: int(x[-2:]) for x in lattices}

    summ_mpi, dsumm_mpi, ddsumm_mpi = [], [], []
    summ_dE, dsumm_dE, ddsumm_dE = [], [], []
    summ_a, dsumm_a, ddsumm_a = [], [], []
    summ_ampi, dsumm_ampi, ddsumm_ampi = [], [], []
    for lat in lattices:
        if verbose:
            print("reading %s data" % (lat))
        ## read pion data
        if verbose:
            print("reading pion data")
        fname = "%s/fit_results_%s_TP%d.npz" % (datafolder, lat, d2)
        pionranges, pi, pichi2, pipvals = ana.read_fitresults(fname)
        # calculate statistic and systematic error of the pion
        plotname="".join(("pion_", lat))
        mpi, dmpi_stat, dmpi_syst, weights_mpi = ana.sys_error(pi, pipvals, d, 
                                                     plotname, path=plotfolder)
        # append to global list
        summ_mpi.append(mpi)
        dsumm_mpi.append(dmpi_stat)
        ddsumm_mpi.append(dmpi_syst)

        ## read ratio fit data
        if verbose:
            print("reading dE data")
        fname = "%s/fit_ratio_%s_TP%d_s%d.npz" % (datafolder, lat, d2, shift)
        ratioranges, rres, rchi2, rpvals = ana.read_fitresults(fname)
        # calculate statistic and systematic error for delta E
        plotname = "ratio_s%d_%s" % (shift, lat)
        dE, ddE_stat, ddE_syst, weights_dE = ana.sys_error(rres, rpvals, d, 
            plotname, par=1, path=plotfolder, absolute=True)

        # append to global list
        summ_dE.append(dE)
        dsumm_dE.append(ddE_stat)
        ddsumm_dE.append(ddE_syst)

        # calculate scattering length
        if verbose:
            print("reading scattering length data")
        fname = "%s/scat_len_%s_TP%d_s%d.npz" % (datafolder, lat, d2, shift)
        _u, _a, weights_a, a = ana.read_fitresults(fname)
        # statistical error for scattering length
        plotname = "scatlen_s%d_%s" % (shift, lat)
        a_pipi, da_stat, da_syst = ana.sys_error_der(a, weights_a, d, plotname,
                                                     path=plotfolder, absolute=False)

        # append to global list
        summ_a.append(a_pipi)
        dsumm_a.append(da_stat)
        ddsumm_a.append(da_syst)

        # calculate mpi * a
        if verbose:
            print("reading a * mpi data")
        fname = "%s/ampi_%s_TP%d_s%d.npz" % (datafolder, lat, d2, shift)
        _u, _ampi, weights_ampi, ampi = ana.read_fitresults(fname)

        # statistical and systematic error for a*mpi
        plotname = "ampi_s%d_%s" % (shift, lat)
        am_pipi, dam_stat, dam_syst = ana.sys_error_der(ampi, weights_ampi, d,
                                                        plotname, path=plotfolder,
                                                        absolute=False)

        # append to global list
        summ_ampi.append(am_pipi)
        dsumm_ampi.append(dam_stat)
        ddsumm_ampi.append(dam_syst)

    w_pi, w_dpi, w_ddpi = wiki_dict()
    print("mpi")
    for i, lat in enumerate(lattices):
        for p, dp, ddp in zip(summ_mpi[i], dsumm_mpi[i], ddsumm_mpi[i]):
            print("%8s: %.4f +- %.4f +%.4f -%.4f\t%.4f +- %.4f +%.4f -%.4f\t%+.2f  %+.2f" % 
                  (lat, p, dp, ddp[1], ddp[0], w_pi[lat], w_dpi[lat], w_ddpi[lat], w_ddpi[lat],
                  (p-w_pi[lat])/dp, (p-w_pi[lat])/w_dpi[lat]))

    p_dE, p_ddE, p_dddE = paper_dE()
    print("dE")
    for i, lat in enumerate(lattices):
        for p, dp, ddp in zip(summ_dE[i], dsumm_dE[i], ddsumm_dE[i]):
            for q, dq, ddq in zip(p, dp, ddp):
                print("%8s: %.4f +- %.4f +%.4f -%.4f\t%.4f +- %.4f +%.4f -%.4f\t%+.2f  %+.2f" %
                      (lat, q, dq, ddq[1], ddq[0], p_dE[lat], p_ddE[lat], p_dddE[lat][1], p_dddE[lat][0],
                      (q-p_dE[lat])/dq, (q-p_dE[lat])/p_ddE[lat]))

    print("a")
    for i, lat in enumerate(lattices):
        for p, dp, ddp in zip(summ_a[i], dsumm_a[i], ddsumm_a[i]):
            for q, dq, ddq in zip(p, dp, ddp):
                print("%8s: %5.2f +- %.2f +%.2f -%.2f" % (lat, q, dq, ddq[1], ddq[0]))

    p_am, p_dam, p_ddam = paper_am()
    print("a * mpi")
    for i, lat in enumerate(lattices):
        for p, dp, ddp in zip(summ_ampi[i], dsumm_ampi[i], ddsumm_ampi[i]):
            for q, dq, ddq in zip(p, dp, ddp):
                print("%8s: %.3f +- %.3f +%.3f -%.3f\t%.3f +- %.3f +%.3f -%.3f\t%+.2f  %+.2f" %
                      (lat, q, dq, ddq[1], ddq[0], p_am[lat], p_dam[lat], p_ddam[lat][1], p_ddam[lat][0],
                      (q+p_am[lat])/dq, (q+p_am[lat])/p_dam[lat]))

    # output for latex
    print("mpi")
    for i, lat in enumerate(lattices):
        for p, dp, ddp in zip(summ_mpi[i], dsumm_mpi[i], ddsumm_mpi[i]):
            print("%8s & $%.4f(%1.0f)(^{+%1.0f}_{-%1.0f})$ & $%.4f(%1.0f)(^{+%1.0f}_{-%1.0f})$ & $%+.2f$ \\\\" % 
                  (lat, w_pi[lat], w_dpi[lat]*10000., w_ddpi[lat]*10000., w_ddpi[lat]*10000., p, dp*10000., ddp[1]*10000.,
                  ddp[0]*10000., (p-w_pi[lat])/dp))

    print("dE")
    for i, lat in enumerate(lattices):
        for p, dp, ddp in zip(summ_dE[i], dsumm_dE[i], ddsumm_dE[i]):
            for q, dq, ddq in zip(p, dp, ddp):
                print("%8s & $%.4f(%1.0f)(^{+%1.0f}_{-%1.0f})$ & $%.4f(%1.0f)(^{+%1.0f}_{-%1.0f})$ & $%+.2f$ \\\\" % 
                      (lat, p_dE[lat], p_ddE[lat]*10000., p_dddE[lat][1]*10000., p_dddE[lat][0]*10000., q, dq*10000., ddq[1]*10000.,
                      ddq[0]*10000., (q-p_dE[lat])/dq))

    print("a")
    for i, lat in enumerate(lattices):
        for p, dp, ddp in zip(summ_a[i], dsumm_a[i], ddsumm_a[i]):
            for q, dq, ddq in zip(p, dp, ddp):
                print("%8s & $%.2f(%1.0f)(^{+%1.0f}_{-%1.0f})$ \\\\" % (lat, q, dq*100., ddq[1]*100., ddq[0]*100.))

    print("a * mpi")
    for i, lat in enumerate(lattices):
        for p, dp, ddp in zip(summ_ampi[i], dsumm_ampi[i], ddsumm_ampi[i]):
            for q, dq, ddq in zip(p, dp, ddp):
                print("%8s & $%.3f(%1.0f)(^{+%1.0f}_{-%1.0f})$ & $%.3f(%1.0f)(^{+%1.0f}_{-%1.0f})$ & $%+.2f$ \\\\" % 
                      (lat, p_am[lat], p_dam[lat]*1000., p_ddam[lat][1]*1000., p_ddam[lat][0]*1000., q, dq*1000., ddq[1]*1000.,
                      ddq[0]*1000., (q-p_am[lat])/dq))
    return

def main():
    d0 = np.array([0., 0., 0.]) # total momentum of the system
    #lattices=["A30.32", "A40.20", "A40.24", "A40.32", "A60.24",
    #          "A80.24", "A100.24", "B25.32", "B35.32", "B35.48",
    #          "B55.32", "B85.24", "D15.48", "D30.48", "D45.32"]
    lattices=["A30.32", "A40.20", "A40.24", "A40.32", "A60.24",
              "A80.24", "A100.24", "B25.32", "B35.32", "B35.48",
              "B55.32", "B85.24", "D15.48", "D45.32"]
    datafolder = "./raw_data/"
    plotfolder = "./plots/"
    #print(path[ens], datafolder, plotfolder, lattices[ens],
    #      int(lattices[ens][-2:]), gmax[ens])
    print_summary(datafolder, plotfolder, lattices, shift=0)
    return

# make this script importable, according to the Google Python Style Guide
if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
