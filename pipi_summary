#!/hadron/knippsch/Enthought/Canopy_64bit/User/bin/python
##!/usr/bin/python
################################################################################
#
# Author: Christian Jost (jost@hiskp.uni-bonn.de)
# Date:   Februar 2015
#
# Copyright (C) 2015 Christian Jost
# 
# This program is free software: you can redistribute it and/or modify it under 
# the terms of the GNU General Public License as published by the Free Software 
# Foundation, either version 3 of the License, or (at your option) any later 
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with tmLQCD. If not, see <http://www.gnu.org/licenses/>.
#
################################################################################
#
# Function: This is the start of the eta/eta' analysis program
#
# For informations on input parameters see the description of the function.
#
################################################################################

import sys
import numpy as np
import matplotlib
matplotlib.use('Agg') # has to be imported before the next lines
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages

import analysis2 as ana

def wiki_dict():
    """Dictionaries of the pion data from the ETMC wiki."""
    w_pi = {"A30.32": (0.12395, 0.00036, 0.00014, 0.),
            "A40.20": (0.14927, 0.00074, 0.00096, 0.),
            "A40.24": (0.14492, 0.00052, 0.00034, 0.),
            "A40.32": (0.14142, 0.00027, 0.00042, 0.),
            "A60.24": (0.17275, 0.00045, 0.00023, 0.),
            "A80.24": (0.19875, 0.00041, 0.00035, 0.),
            "A100.24": (0.22293, 0.00035, 0.00038, 0.),
            "A80.24s": (0.19880, 0.00046, 0.00053, 0.),
            "A100.24s": (0.22125, 0.00058, 0.00119, 0.),
            "B25.32": (0.10680, 0.00039, 0.00027, 0.),
            "B35.48": (0.12402, 0.00011, 0.00000, 0.),
            "B35.32": (0.12602, 0.00030, 0.00030, 0.),
            "B55.32": (0.15518, 0.00021, 0.00033, 0.),
            "B85.24": (0.19396, 0.00038, 0.00054, 0.),
            "D15.48": (0.06975, 0.00020, 0.00000, 0.),
            "D30.48": (0.09780, 0.00016, 0.00032, 0.),
            "D45.32": (0.12087, 0.00040, 0.00000, 0.)}
    return w_pi

def paper_dE():
    """The values for dE from the paper."""
    p_dE = {"A30.32": (0.0037, 0.0001, 0.0002, 0.0001),
            "A40.20": (0.0179, 0.0005, 0.0001, 0.0002),
            "A40.24": (0.0082, 0.0003, 0.0001, 0.0004),
            "A40.32": (0.0033, 0.0001, 0.0001, 0.0001),
            "A60.24": (0.0076, 0.0002, 0.0001, 0.0001),
            "A80.24": (0.0071, 0.0001, 0.0001, 0.0000),
            "A100.24": (0.0063, 0.0001, 0.0001, 0.0001),
            "A80.24s": (np.nan,)*4,
            "A100.24s": (np.nan,)*4,
            "B25.32": (np.nan,)*4,
            "B35.48": (np.nan,)*4,
            "B35.32": (0.0041, 0.0002, 0.0001, 0.0001),
            "B55.32": (0.0039, 0.0001, 0.0001, 0.0001),
            "B85.24": (0.0085, 0.0001, 0.0001, 0.0000),
            "D15.48": (np.nan,)*4,
            "D30.48": (np.nan,)*4,
            "D45.32": (0.0084, 0.0002, 0.0005, 0.0000)}
    return p_dE

def paper_am():
    """The values for a*mpi from the paper."""
    p_am = {"A30.32": (-0.1325, 0.0042, 0.0042, 0.0069),
            "A40.20": (-0.2024, 0.0044, 0.0020, 0.0011),
            "A40.24": (-0.1640, 0.0054, 0.0088, 0.0017),
            "A40.32": (-0.1553, 0.0048, 0.0031, 0.0035),
            "A60.24": (-0.2165, 0.0038, 0.0027, 0.0023),
            "A80.24": (-0.2622, 0.0033, 0.0008, 0.0009),
            "A100.24": (-0.2938, 0.0033, 0.0008, 0.0030),
            "A80.24s": (np.nan,)*4,
            "A100.24s": (np.nan,)*4,
            "B25.32": (np.nan,)*4,
            "B35.48": (-0.1567, 0.0193, 0.0085, 0.0261),
            "B35.32": (-0.1507, 0.0059, 0.0027, 0.0027),
            "B55.32": (-0.2185, 0.0052, 0.0023, 0.0025),
            "B85.24": (-0.2921, 0.0034, 0.0007, 0.0039),
            "D15.48": (-0.1163, 0.0157, 0.0089, 0.0107),
            "D30.48": (np.nan,)*4,
            "D45.32": (-0.2618, 0.0058, 0.0011, 0.0120)}
    return p_am

def paper_cotd():
    """The values for q*cot(delta) from the paper."""
    p_cd = {"A30.32": (-0.92, 0.03, 0.05, 0.02),
            "A40.20": (-0.71, 0.02, 0.01, 0.01),
            "A40.24": (-0.87, 0.03, 0.01, 0.05),
            "A40.32": (-0.90, 0.03, 0.02, 0.05),
            "A60.24": (-0.79, 0.01, 0.01, 0.01),
            "A80.24": (-0.75, 0.01, 0.00, 0.00),
            "A100.24": (-0.75, 0.01, 0.01, 0.01),
            "A80.24s": (np.nan,)*4,
            "A100.24s": (np.nan,)*4,
            "B25.32": (np.nan,)*4,
            "B35.48": (np.nan,)*4,
            "B35.32": (-0.82, 0.03, 0.02, 0.02),
            "B55.32": (-0.71, 0.02, 0.01, 0.01),
            "B85.24": (-0.66, 0.01, 0.01, 0.00),
            "D15.48": (np.nan,)*4,
            "D30.48": (np.nan,)*4,
            "D45.32": (-0.45, 0.01, 0.02, 0.00)}
    return p_cd

def print_line(lat, d, r):
    """Print summary line.

    Parameter
    ---------
    lat : str
        The lattice name
    d : tuple, list
        The data
    r : tuple, list
        The refenence data
    """
    if r[0] is np.nan:
        print("%9s: %6s +- %6s +%6s -%6s\t%.4f +- %.4f +%.4f -%.4f\t%5s  %5s" %
            (lat, "nan", "nan", "nan", "nan", d[0], d[1], d[2], d[3], "---", "---"))
    else:
        print("%9s: %.4f +- %.4f +%.4f -%.4f\t%.4f +- %.4f +%.4f -%.4f\t%+.2f  %+.2f" %
            (lat, r[0], r[1], r[2], r[3], d[0], d[1], d[2], d[3], (r[0]-d[0])/r[1], (r[0]-d[0])/d[1]))

def print_line_latex(lat, d, r, prec=1e4):
    """Print summary line.

    Parameter
    ---------
    lat : str
        The lattice name
    d : tuple, list
        The data
    r : tuple, list
        The refenence data
    """
    if r[0] is np.nan:
        print("%9s & NA & $%.4f(%1.0f)(^{+%1.0f}_{-%1.0f})$ & $---$ \\\\" % 
              (lat, d[0], d[1]*prec, d[2]*prec, d[3]*prec))
    else:
        print("%9s & $%.4f(%1.0f)(^{+%1.0f}_{-%1.0f})$ & $%.4f(%1.0f)(^{+%1.0f}_{-%1.0f})$ & $%+.2f$ \\\\" % 
              (lat, r[0], r[1]*prec, r[2]*prec, r[3]*prec, d[0], d[1]*prec, d[2]*prec, d[3]*prec, (r[0]-d[0])/d[1]))

def print_summary(datafolder, plotfolder, lattices, d2=0):
    """Print a summary of the lattices given.

    Args:
        datafolder: where the raw data is stored
        plotfolder: where to store the plots
        lattices: list of lattices to work on
    """
    verbose=False
    ## other variables
    filempi = "fit_pi.npz"
    #filedE = "dE_TP%d.npz" % d2
    #filea = "scat_len_TP%d.npz" % d2
    #fileam = "am_pi_TP%d.npz" % d2
    filedE = "fit_pipi_ratio_TP%d.npz" % d2
    filea = "scat_len_ratio_TP%d.npz" % d2
    fileam = "am_pi_ratio_TP%d.npz" % d2
    par_mpi=1
    par_dE=1

    summ_mpi, summ_dE, summ_a, summ_ampi = [], [], [], []
    for lat in lattices:
        print("read data for %s" % lat)
        # get m_pi data
        mpi = ana.FitResult.read("%s/%s/%s" % (datafolder, lat, filempi))
        mpi.calc_error()
        # get dE
        dE = ana.FitResult.read("%s/%s/%s" % (datafolder, lat, filedE))
        dE.calc_error()
        # get a_0
        a = ana.FitResult.read("%s/%s/%s" % (datafolder, lat, filea))
        a.calc_error()
        # get m_pi*a_0 data
        ampi = ana.FitResult.read("%s/%s/%s" % (datafolder, lat, fileam))
        ampi.calc_error()

        # m_pi is not derived, so choose correct parameter
        summ_mpi.append([mpi.error[par_mpi][0][0][0], mpi.error[par_mpi][1][0],
                         mpi.error[par_mpi][2][0][0], mpi.error[par_mpi][2][0][0]])

        # dE might is not derived, so choose correct parameter
        summ_dE.append([dE.error[par_dE][0][0][0], dE.error[par_dE][1][0],
                        dE.error[par_dE][2][0][0], dE.error[par_dE][2][0][1]])

        # a_0 is derived, no need to choose parameter
        summ_a.append([a.error[0][0][0][0], a.error[0][1][0],
                       a.error[0][2][0][0], a.error[0][2][0][1]])

        # a_0*m_pi is derived, no need to choose parameter
        summ_ampi.append([ampi.error[0][0][0][0], ampi.error[0][1][0],
                          ampi.error[0][2][0][0], ampi.error[0][2][0][1]])

    w_pi = wiki_dict()
    print("mpi")
    print("%9s  %32s\t%32s\t%12s"% ("lattice", "reference", "data", "sigma"))
    for lat, d in zip(lattices, summ_mpi):
        print_line(lat, d, w_pi[lat])

    p_dE = paper_dE()
    print("dE")
    print("%9s  %32s\t%32s\t%12s"% ("lattice", "reference", "data", "sigma"))
    for lat, d in zip(lattices, summ_dE):
        print_line(lat, d, p_dE[lat])

    print("a")
    print("%9s  %26s"% ("lattice", "data"))
    for lat, d in zip(lattices, summ_a):
        print("%8s: %5.2f +- %.2f +%.2f -%.2f" % (lat, d[0], d[1], d[2], d[3]))

    p_am = paper_am()
    print("a * mpi")
    print("%9s  %32s\t%32s\t%12s"% ("lattice", "reference", "data", "sigma"))
    for lat, d in zip(lattices, summ_ampi):
        print_line(lat, d, p_am[lat])

    # output for latex
    print("mpi")
    for lat, d in zip(lattices, summ_mpi):
        print_line_latex(lat, d, w_pi[lat])

    print("dE")
    for lat, d in zip(lattices, summ_dE):
        print_line_latex(lat, d, p_dE[lat])

    print("a")
    for lat, d in zip(lattices, summ_a):
        print("%8s & $%.2f(%1.0f)(^{+%1.0f}_{-%1.0f})$ \\\\" % (lat, d[0], d[1]*100., d[2]*100., d[3]*100.))

    print("a * mpi")
    for lat, d in zip(lattices, summ_ampi):
        print_line_latex(lat, d, p_am[lat])
    return

def main():
    d0 = np.array([0., 0., 0.]) # total momentum of the system
    s = 1
    lattices=["A30.32", "A40.20", "A40.24", "A40.32", "A60.24",
              "A80.24", "A100.24", "B25.32", "B35.32", "B35.48",
              "B55.32", "B85.24", "D15.48", "D30.48", "D45.32"]
    #lattices=["A30.32", "A40.20", "A40.24", "A60.24",
    #          "A80.24", "A100.24", "B25.32", "B35.32", "B35.48",
    #          "B55.32", "B85.24", "D30.48", "D45.32"]
    #lattices=["A30.32", "A40.20", "A40.24", "A60.24",
    #          "A80.24", "A100.24", "B85.24", "D45.32"]
    #lattices=["A30.32", "B85.24", "D15.48"]
    datafolder = "./data/I2/"
    plotfolder = "./plots/I2/"
    print_summary(datafolder, plotfolder, lattices)
    return

# make this script importable, according to the Google Python Style Guide
if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
