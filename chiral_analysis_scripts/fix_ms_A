#!/usr/bin/python
################################################################################
#
# Author: Christopher Helmes (helmes@hiskp.uni-bonn.de)
# Date:   December 2017
#
# Copyright (C) 2017 Christopher Helmes
# 
# This program is free software: you can redistribute it and/or modify it under 
# the terms of the GNU General Public License as published by the Free Software 
# Foundation, either version 3 of the License, or (at your option) any later 
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with tmLQCD. If not, see <http://www.gnu.org/licenses/>.
#
################################################################################
# 
# Fix the strange quark mass in a chiral lQCD analysis. As a fixing parameter
# the Difference
# M_s^2 = r_0^2( M_K^2 - 0.5M_{\pi}^2 ),
# is introduced and the lattice results are interpolated to the corresponding 
# continuum value.
# 
# The input varies with the choice of a value for Z_P the multiplicative
# renormalization of quark masses. This is done via inputfiles which in addition
# state values for necessary random_seeds
# 
# The data produced is stored as a binary object. 
#
# 
################################################################################
# system imports
import sys
from scipy import stats
from scipy import interpolate as ip
import numpy as np
from numpy.polynomial import polynomial as P
import math
import matplotlib
matplotlib.use('Agg') # has to be imported before the next lines
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from matplotlib.backends.backend_pdf import PdfPages

# Christian's packages
sys.path.append('/hiskp4/helmes/projects/analysis-code/')
import analysis2 as ana

def main():
################################################################################
#                   set up objects                                             #
################################################################################
    # Get parameters from initfile
    if len(sys.argv) < 2:
        ens = ana.LatticeEnsemble.parse("A40.24.ini")
    else:
        ens = ana.LatticeEnsemble.parse(sys.argv[1])

    # get data from input file
    space=ens.get_data("beta")
    latA = ens.get_data("namea")
    latB = ens.get_data("nameb")
    latD = ens.get_data("named")
    strangeA = ens.get_data("strangea")
    strangeB = ens.get_data("strangeb")
    strangeD = ens.get_data("stranged")
    strange_eta_A = ens.get_data("strange_alt_a")
    strange_eta_B = ens.get_data("strange_alt_b")
    strange_eta_D = ens.get_data("strange_alt_d")

    # read seeds from input files
    zp_meth=ens.get_data("zp_meth")
    try:
        epik_meth = ens.get_data("epik_meth")
    except:
        epik_meth=""
    external_seeds = ens.get_data("external_seeds_a")
    continuum_seeds = ens.get_data("continuum_seeds_a")
    amulA = ens.get_data("amu_l_a")
    amulB = ens.get_data("amu_l_b")
    amulD = ens.get_data("amu_l_d")

    #dictionary of strange quark masses
    amusA = ens.get_data("amu_s_a")
    amusB = ens.get_data("amu_s_b")
    amusD = ens.get_data("amu_s_d")
    # dictionaries for chiral analysis
    lat_dict = ana.make_dict(space,[latA,latB,latD])
    amu_l_dict = ana.make_dict(space,[amulA,amulB,amulD])
    mu_s_dict = ana.make_dict(space,[strangeA,strangeB,strangeD])
    mu_s_eta_dict = ana.make_dict(space,[strange_eta_A,strange_eta_B,strange_eta_D])
    amu_s_dict = ana.make_dict(space,[amusA,amusB,amusD])
    print(amu_s_dict)
    #quark = ens.get_data("quark")
    datadir = ens.get_data("datadir") 
    plotdir = ens.get_data("plotdir") 
    resdir = ens.get_data("resultdir") 
    nboot = ens.get_data("nboot")
    # Prepare external data, saving it is at the moment not feasible
    ext_data = ana.ExtDat(external_seeds,space,zp_meth)
    #ana.save_dict(resdir+'/external_observables_A%d.json'%zp_meth,ext_data.data)
    cont_data = ana.ContDat(continuum_seeds,zp_meth=zp_meth)
    #ana.save_dict(resdir+'/continuum_observables_A%d.json'%zp_meth,cont_data.data)
    fpi_raw = ana.read_extern("../plots2/data/fpi.dat",(1,2))
    print(fpi_raw)

    read = False
################### Setup chiral analysis ######################################
    extrapol = ana.ChirAna("pi-K_I32_chipt_A%d_%s"%(zp_meth,epik_meth),
                           correlated=False,gamma=False,match=True)
    # have five x-values: mk,mpi,meta,fpi,r0/a
    ens_shape_chirana = (len(latA),len(latB),len(latD))
    print(ens_shape_chirana)
    lyt_xvals = ana.generate_chirana_shape(space,ens_shape_chirana,1,5,1500)
    lyt_yvals = ana.generate_chirana_shape(space,ens_shape_chirana,1,1,1500) 
    #lyt_xvals = (len(space),ens_shape_chirana,1,5,1500)
    #lyt_yvals = (len(space),ens_shape_chirana,1,1,1500)
    extrapol.create_empty(lyt_xvals,lyt_yvals,lat_dict=lat_dict)
    print("\nSetup complete, begin chiral analysis")
    if read is True:
        extrapol.load(resdir)
    else:

################################################################################
#                   input data                                                 #
################################################################################
        for i,a in enumerate(space):
            print("\nWorking at lattice spacing %s" %a)
            for j,e in enumerate(lat_dict[a]):
                # if using D30.48 modify lowest amus to 0.0115
                if e == 'D30.48':
                    print("modifying lowest mu_s values")
                    mu_s_dict[a][0] ='amu_s_115' 
                    amu_s_dict[a][0]=0.0115
                    mu_s_eta_dict[a][0]='strange_1150'

####    ############### read in M_K^FSE ############################################
                mksq_fse = ana.MatchResult("mksq_fse_M%dA_%s"%(zp_meth, e),
                                           save=datadir+'%s/'%e)
                ana.MatchResult.create_empty(mksq_fse,1500,3)
                mk_names = [datadir+'%s/' % (e) +s+'/fit_k_%s.npz' % (e) for s in mu_s_dict[a]]
                print(mk_names)
                mksq_fse_meas = ana.init_fitreslst(mk_names)
                mksq_fse.load_data(mksq_fse_meas,1,amu_s_dict[a],square=True)
                mksq_fse.add_extern_data('../plots2/data/k_fse_mk.dat',e,square=True,
                                       read='fse_mk',op='mult')
                print("\nM_K^2:")
                print(mksq_fse.obs[:,0])

####    ############### read in M_pi^FSE ###########################################
                mpi_fse = ana.MatchResult("mpi_fse_M%dA_%s"%(zp_meth,e),
                                          save=datadir+'%s/'%e)
                ana.MatchResult.create_empty(mpi_fse,1500,3)
                mpi_names = [datadir+'%s/' % (e) +'/pi'+'/fit_pi_%s.npz' % (e) for s in mu_s_dict[a]]
                mpi_fse_meas = ana.init_fitreslst(mpi_names)
                mpi_fse.load_data(mpi_fse_meas,1,amu_s_dict[a],square=False)
                mpi_fse.add_extern_data('../plots2/data/k_fse_mpi.dat',e,square=False,
                                       read='fse_mpi',op='div')
                print("\nM_pi:")
                print(mpi_fse.obs[:,0])

####    ############### build M_s^{2,FSE} ##########################################
                mssq_fse = ana.MatchResult("mssq_fse_M%dA_%s" % (zp_meth,e),save = datadir+'%s/'%e)
                ana.MatchResult.create_empty(mssq_fse,1500,3)
                mssq_fse.set_data(mksq_fse.obs,amu_s_dict[a])
                mssq_fse.add_data(np.square(mpi_fse.obs),idx=slice(0,3),op='min',
                              fac=0.5)
                print("\nM_s^2:")
                print(mssq_fse.obs[:,0])
                
####    ############### read in M_eta ##############################################
                metasq = ana.MatchResult("metasq_M%dA_%s"%(zp_meth,e),save=datadir+'%s/'%e)
                ana.MatchResult.create_empty(metasq,1500,3)
                meta_names = ['/hiskp4/hiskp2/jost/eta_data/'+'%s/' % (e) +s+'/fit_eta_rm_TP0.npz' for s in mu_s_eta_dict[a]]
                meta_meas = ana.init_fitreslst(meta_names)
                metasq.load_data(meta_meas,1,amu_s_dict[a],square=True)
                print("\nM_eta^2:")
                print(metasq.obs[:,0])

########################  read in mu_pik a_3/2 ################################
                mua32 = ana.MatchResult("mua32_M%dA_%s_%s" %(zp_meth,epik_meth,
                                        e),save=datadir+'%s/'%e)
                ana.MatchResult.create_empty(mua32,1500,3)
                mua32_names = [datadir+'%s/' % (e) +s+'/mu_a0_TP0_%s_%s.npz' 
                               % (e,epik_meth) for s in mu_s_dict[a]]
                mua32_meas=ana.init_fitreslst(mua32_names)
                mua32.load_data(mua32_meas,0,amu_s_dict[a],square=False)
####    ############################################################################
#                       fix strange quark mass                                     #
####    ############################################################################
                
                evl_x = ana.mk_mpi_diff_phys(a, nboot, cont_data, ext_data)
                print("\n(M^2_k-0.5*M^2_pi):")
                print(ana.compute_error(evl_x))
####    ############### interpolate M_K^FSE ########################################
                mksq_fse.amu = mssq_fse.obs
                print("\nM_K^2:")
                print(mksq_fse.obs[:,0])
                label = [r'$a^2(M_K^2-0.5M^2_{\pi})$',r'$M_{K}^2$',
                         r'$a^2(M_K^2-0.5M^2_{\pi}) = (aM_s^{\mathrm{ref}})^2$']
                mksq_fse.eval_at(evl_x,plotdir=plotdir,
                               ens=e,plot=True,label=label, meth=2)

####    ############### interpolate M_eta ##########################################
                metasq.amu = mssq_fse.obs
                label = [r'$a^2(M_K^2-0.5M^2_{\pi})$',r'$M_{\eta}^2$',
                         r'$a^2(M_K^2-0.5M^2_{\pi}) = (aM_s^{\mathrm{ref}})^2$']
                metasq.eval_at(evl_x,plotdir=plotdir,
                               ens=e,plot=True,label=label, meth=2)

####    ############### interpolate mu_piK a_3/2 ###################################
                mua32.amu = mssq_fse.obs
                label = [r'$a^2(M_K^2-0.5M^2_{\pi})$',r'$\mu_{\pi K}\, a_{3/2}$',
                         r'$a^2(M_K^2-0.5M^2_{\pi}) = (aM_s^{\mathrm{ref}})^2$']
                mua32.eval_at(evl_x,plotdir=plotdir,
                               ens=e,plot=True,label=label, meth=2)

####    ############################################################################
#                       copy to chiral analysis                                    #
####    ############################################################################
                extrapol.add_data(evl_x,(i,j,0,0),dim='mu')
                # Add mua32 data
                extrapol.add_data(mua32.eval_obs[2],(i,j,0,0),'y')
                # Add M_pi data
                extrapol.add_data(mpi_fse.obs[1],(i,j,0,0),dim='x')
                # Add M_K data  
                extrapol.add_data(np.sqrt(mksq_fse.eval_obs[2]),(i,j,0,1),'x')
                # Add f_pi data
                dummy, fpi = ana.prepare_fk(fpi_raw,e,1500)
                extrapol.x_data[i][j,0,2] = fpi
                extrapol.add_extern_data("../plots2/data/k_fse_fpi.dat",(i,j,0,2),e,
                                         dim='x',read='k_fse',square=False,
                                         op='div')
                # add r_0 data
                extrapol.x_data[i][j,0,3] = ext_data.get(a,'r0')
                # Add M_eta data
                extrapol.add_data(np.sqrt(metasq.eval_obs[2]),(i,j,0,4),'x')
    extrapol.save(resdir)
    header = ["#amu_l", "amu_s", "mpi", "dmpi", "mk", "dmk", "fpi", "dfpi",
              "r0/a", "d(r0/a)", "m_eta","dm_eta","mu a0", "d(mu a0)"]
    ana.print_summary(extrapol,header,amu_l_dict,amu_s_dict)
if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("Keyboard Interrupt")


