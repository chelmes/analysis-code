#!/hadron/knippsch/Enthought/Canopy_64bit/User/bin/python

################################################################################
#
# Author: Christopher Helmes (helmes@hiskp.uni-bonn.de)
# Date:   May 2017
#
# Copyright (C) 2017 Christopher Helmes
# 
# This program is free software: you can redistribute it and/or modify it under 
# the terms of the GNU General Public License as published by the Free Software 
# Foundation, either version 3 of the License, or (at your option) any later 
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with tmLQCD. If not, see <http://www.gnu.org/licenses/>.
#
################################################################################
#
# Fit mu*a_32 in NLO-chipt at fixed strange quark mass
# 
# The fitfunction reads:
# mu*a_3/2 = mu^2/(4*pi f^2_pi)(-1 + L_piK(Lambda) * 32*m_pi*m_K/f^2_pi
#                               -L_5(Lambda) * 16*m^2_pi/f^2_pi
#                               +Chi^I32_piK(Lambda,m_pi,m_K)/(16*pi^2*f^2_pi))
# Chi^I32_piK(Lambda,m_pi,m_K) is a NLO-function including chiral logarithms
################################################################################
# system imports
import sys
from scipy import stats
from scipy import interpolate as ip
import numpy as np
from numpy.polynomial import polynomial as P
import math
import matplotlib
matplotlib.use('Agg') # has to be imported before the next lines
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from matplotlib.backends.backend_pdf import PdfPages

# Christian's packages
sys.path.append('/hiskp2/helmes/projects/analysis-code/')
import analysis2 as ana

def main():
################################################################################
#                   set up objects                                             #
################################################################################
    # Get parameters from initfile
    if len(sys.argv) < 2:
        ens = ana.LatticeEnsemble.parse("A40.24.ini")
    else:
        ens = ana.LatticeEnsemble.parse(sys.argv[1])

    # get data from input file
    lat = ens.name()
    latA = ens.get_data("namea")
    latB = ens.get_data("nameb")
    latD = ens.get_data("named")
    strangeA = ens.get_data("strangea")
    strangeB = ens.get_data("strangeb")
    strangeD = ens.get_data("stranged")
    strange_eta_A = ens.get_data("strange_alt_a")
    strange_eta_B = ens.get_data("strange_alt_b")
    strange_eta_D = ens.get_data("strange_alt_d")
    space=['A','B','D']
    seeds = [1269, 4761, 8157, 7783, 2954, 8356]
    seeds2 = [9042, 9280, 2219, 4911, 2506,8479,1845,2945]
    #Old seeds
    #seeds = [5859, 5672, 4104, 5382, 8439, 6186]
    #seeds2 = [9042, 9280, 2219, 4911, 2506,8479]
    lat_dict = {'A':latA,'B':latB,'D':latD}
    amulA = ens.get_data("amu_l_a")
    amulB = ens.get_data("amu_l_b")
    amulD = ens.get_data("amu_l_d")
    amu_l_dict = {'A': amulA,'B': amulB, 'D': amulD}

    #dictionary of strange quark masses
    mu_s_dict = {'A': strangeA,'B': strangeB, 'D': strangeD}
    mu_s_eta_dict = {'A': strange_eta_A,'B': strange_eta_B, 'D': strange_eta_D}
    amusA = ens.get_data("amu_s_a")
    amusB = ens.get_data("amu_s_b")
    amusD = ens.get_data("amu_s_d")
    amu_s_dict = {'A': amusA,'B': amusB, 'D': amusD}
    print(amu_s_dict)
    #quark = ens.get_data("quark")
    datadir = ens.get_data("datadir") 
    plotdir = ens.get_data("plotdir") 
    resdir = ens.get_data("resultdir") 
    nboot = ens.get_data("nboot")
    # Prepare external data
    ext_data = ana.ExtDat(seeds,space,2)
    cont_data = ana.ContDat(seeds2,zp_meth=2)
    fpi_raw = ana.read_extern("../plots2/data/fpi.dat",(1,2))
    print(fpi_raw)

    read_ms_fix = False
    read_ext = False
    # Physical strange quark mass
    ms = 0.
################### Setup fixation of strange quark mass #############################
    fixms = ana.ChirAna("pi-K_I32_chipt_fixms_M2B",correlated=True,gamma=False,
                           match=True, fit_ms = True)
    ens_shape_chirana = (len(latA),len(latB),len(latD))
    print(ens_shape_chirana)
    # have 3 strange quark masses 
    lyt_xvals = (3,ens_shape_chirana,3,2,1500)
    lyt_yvals = (3,ens_shape_chirana,3,1,1500)
    fixms.create_empty(lyt_xvals,lyt_yvals,lat_dict=lat_dict)
    print("\nSetup complete, begin chiral analysis")
    if read_ms_fix is True:
        fixms.load(resdir)
    else:

################################################################################
#                   input data                                                 #
################################################################################
        for i,a in enumerate(space):
            print("\nWorking at lattice spacing %s" %a)
            for j,e in enumerate(lat_dict[a]):
                # if using D30.48 modify lowest amus to 0.0115
                if e == 'D30.48':
                    print("modifying lowest mu_s values")
                    mu_s_dict[a][0] ='amu_s_115' 
                    amu_s_dict[a][0]=0.0115
                for k,s in enumerate(amu_s_dict[a]):
####################### add r0 ml ##################################################
                    mq_tmp = np.full((nboot,),amu_l_dict[a][j])
                    fixms.add_data(mq_tmp,(i,j,k,0),dim='x')
####################### add r0 ms ##################################################
                    mq_tmp = np.full((nboot,),s)
                    fixms.add_data(mq_tmp,(i,j,k,1),dim='x')
####    ############### read in M_K^FSE ############################################
                mksq_fse = ana.MatchResult("mksq_fse_M2B_%s"%e,save=datadir+'%s/'%e)
                ana.MatchResult.create_empty(mksq_fse,1500,3)
                mk_names = [datadir+'%s/' % (e) +s+'/fit_k_unit_%s.npz' % (e) for s in mu_s_dict[a]]
                mksq_fse_meas = ana.init_fitreslst(mk_names)
                mksq_fse.load_data(mksq_fse_meas,1,amu_s_dict[a],square=True)
                mksq_fse.add_extern_data('../plots2/data/k_fse_mk.dat',e,square=True,
                                       read='fse_mk',op='div')
                # Add data to chirana object
                for k,s in enumerate(amu_s_dict[a]):
                    fixms.add_data(mksq_fse.obs[k],(i,j,k,0),'y')
            fixms.save(resdir)
        label=[r'$r_0m_l$',r'$(r_0 M_K)^2$',r'Physical $m_s$ from physical $M_K^2$',
               r'$(r_0M_{\pi})_{phys}^{2}$']
         
        #fixms.fit_strange_mass(datadir=datadir)
        r = np.r_[1.,1.,1.]
        z = np.r_[1.,1.,1.]
        p = np.r_[6.,0.1,1.]
        start=np.r_[r,z,p]
        # Get the prior samples
        prior = np.vstack((ext_data.get('A','r0'), ext_data.get('B','r0'),
                           ext_data.get('D','r0'), ext_data.get('A','zp'), 
                           ext_data.get('B','zp'), ext_data.get('D','zp')))
        fixms.fit(ana.global_ms_errfunc,start,plotdir=plotdir,correlated=True,
                  prior=prior)
        label = [r'$a\mu_l$',r'$(aM_K)^2$']
        #pick the correct arguments
        args = fixms.fitres.data[0] 
        plot_args = np.asarray([np.hstack((args[:,0+i],args[:,3+i],args[:,6:,0]))
          for i in range(3)])
        plotfunc = lambda p,x: p[2]/(p[0]*p[1]) * (x+p[5]) * (1+p[3]*p[0]/p[1]*x+p[4]/p[0]**2)
        filename = plotdir+'/'+ fixms.proc_id+'.pdf'
        chiral_plot = ana.LatticePlot(filename, join = True)
        chiral_plot.plot_chiral_fit(fixms,space,label,xlim=[0.0,0.011],func=plotfunc,args=plot_args)
        chiral_plot._set_limits(marks=4)
        chiral_plot.save()
        del chiral_plot
        ms = fixms.bare_mu_s(space, lat_dict, cont_data, amu_l_dict, disc_eff=True, debug=1)

    # reset from D30.48 values
    print("modifying lowest mu_s values")
    mu_s_dict['D'][0] ='amu_s_13' 
    amu_s_dict['D'][0]=0.013

################### Setup chiral analysis ######################################
    extrapol = ana.ChirAna("pi-K_I32_chipt_B1",correlated=False,gamma=False,match=True)
    # have five x-values: mk,mpi,meta,fpi,r0/a
    ens_shape_chirana = (len(latA),len(latB),len(latD))
    print(ens_shape_chirana)
    lyt_xvals = (3,ens_shape_chirana,1,5,1500)
    lyt_yvals = (3,ens_shape_chirana,1,1,1500)
    extrapol.create_empty(lyt_xvals,lyt_yvals,lat_dict=lat_dict)
    print("\nSetup complete, begin chiral analysis")
    if read_ext is True:
        extrapol.load(resdir)
    else:

################################################################################
#                   input data                                                 #
################################################################################
        for i,a in enumerate(space):
            print("\nWorking at lattice spacing %s" %a)
            for j,e in enumerate(lat_dict[a]):
                # if using D30.48 modify lowest amus to 0.0115
                if e == 'D30.48':
                    print("modifying lowest mu_s values")
                    mu_s_dict[a][0] ='amu_s_115' 
                    amu_s_dict[a][0]=0.0115
                    mu_s_eta_dict[a][0]='strange_1150'

####    ############### read in M_K^FSE ############################################
                mksq_fse = ana.MatchResult("mksq_fse_M2B_%s"%e,save=datadir+'%s/'%e)
                ana.MatchResult.create_empty(mksq_fse,1500,3)
                mk_names = [datadir+'%s/' % (e) +s+'/fit_k_unit_%s.npz' % (e) for s in mu_s_dict[a]]
                mksq_fse_meas = ana.init_fitreslst(mk_names)
                mksq_fse.load_data(mksq_fse_meas,1,amu_s_dict[a],square=True)
                mksq_fse.add_extern_data('../plots2/data/k_fse_mk.dat',e,square=True,
                                       read='fse_mk',op='div')

####    ############### read in M_pi^FSE ###########################################
                mpi_fse = ana.MatchResult("mpi_fse_M2B_%s"%e,save=datadir+'%s/'%e)
                ana.MatchResult.create_empty(mpi_fse,1500,3)
                mpi_names = [datadir+'%s/' % (e) +s+'/fit_pi_unit_%s.npz' % (e) for s in mu_s_dict[a]]
                mpi_fse_meas = ana.init_fitreslst(mpi_names)
                mpi_fse.load_data(mpi_fse_meas,1,amu_s_dict[a],square=False)
                mpi_fse.add_extern_data('../plots2/data/k_fse_mpi.dat',e,square=False,
                                       read='fse_mk',op='div')

####    ############### read in M_eta ##############################################
                metasq = ana.MatchResult("metasq_M2B_%s"%e,save=datadir+'%s/'%e)
                ana.MatchResult.create_empty(metasq,1500,3)
                meta_names = ['/hiskp2/jost/eta_data/'+'%s/' % (e) +s+'/fit_eta_rm_TP0.npz' for s in mu_s_eta_dict[a]]
                meta_meas = ana.init_fitreslst(meta_names)
                metasq.load_data(meta_meas,1,amu_s_dict[a],square=True)

####    ############### read in a_3/2 ##############################################
                mua32_fse = ana.MatchResult("mua32_M2B_%s" %e,save=datadir+'%s/'%e)
                ana.MatchResult.create_empty(mua32_fse,1500,3)
                a32_names = [datadir+'%s/' % (e) +s+'/scat_len_TP0_%s.npz' % (e) for s in mu_s_dict[a]]
                mua32_meas = ana.init_fitreslst(a32_names)
                mua32_fse.load_data(mua32_meas,0,amu_s_dict[a],square=False)
                
####    ############### build mu_piK a_3/2 #########################################
                for s in range(3):
                    mua32_fse.obs[s] *= ana.reduced_mass(np.sqrt(mksq_fse.obs[s]),
                                                     mpi_fse.obs[s]) 
####    ############################################################################
#                       fix strange quark mass                                     #
####    ############################################################################
                
                evl_x = fixms.eval_at[e]
####    ############### interpolate M_K^FSE ########################################
                #mksq_fse.amu = mssq_fse.obs
                label = [r'$a\mu_s$',r'$M_{K}^2$',
                         r'$a\mu_s = (a\mu_s^{\mathrm{ref}})^2$']
                mksq_fse.eval_at(evl_x,plotdir=plotdir,
                               ens=e,plot=True,label=label, meth=2)

####    ############### interpolate M_eta ##########################################
                #metasq.amu = mssq_fse.obs
                label = [r'$a\mu_s$',r'$M_{K}^2$',r'$M_{\eta}^2$',
                         r'$a\mu_s = (a\mu_s^{\mathrm{ref}})^2$']
                metasq.eval_at(evl_x,plotdir=plotdir,
                               ens=e,plot=True,label=label, meth=2)

####    ############### interpolate mu_piK a_3/2 ###################################
                #mua32_fse.amu = mssq_fse.obs
                label = [r'$a\mu_s$',r'$M_{K}^2$',r'$\mu_{\pi K}\, a_{3/2}$',
                         r'$a\mu_s = (a\mu_s^{\mathrm{ref}})^2$']
                mua32_fse.eval_at(evl_x,plotdir=plotdir,
                               ens=e,plot=True,label=label, meth=2)

####    ############################################################################
#                       copy to chiral analysis                                    #
####    ############################################################################
                extrapol.add_data(evl_x,(i,j,0,0),dim='mu')
                # Add mua32 data
                extrapol.add_data(mua32_fse.eval_obs[2],(i,j,0,0),'y')
                # Add M_pi data
                extrapol.add_data(mpi_fse.obs[1],(i,j,0,0),dim='x')
                # Add M_K data  
                extrapol.add_data(np.sqrt(mksq_fse.eval_obs[2]),(i,j,0,1),'x')
                # Add f_pi data
                dummy, fpi = ana.prepare_fk(fpi_raw,e,1500)
                print("0th Bootstrapsample for fpi: %f" %fpi[0])
                extrapol.x_data[i][j,0,2] = fpi
                extrapol.add_extern_data("../plots2/data/k_fse_fpi.dat",(i,j,0,2),e,
                                         dim='x',read='k_fse',square=False,
                                         op='div')
                # add r_0 data
                extrapol.x_data[i][j,0,3] = ext_data.get(a,'r0')
                # Add M_eta data
                extrapol.add_data(np.sqrt(metasq.eval_obs[2]),(i,j,0,4),'x')
        extrapol.save(resdir)

################################################################################
#                   do chiral extrapolation                                    #
################################################################################
    # Include bootstrapped L_piK as a prior value taken from HPQCD
    l_5 = np.atleast_2d(ana.draw_gauss_distributed(5.41e-3,3e-5,(1500,),
      origin=True))
    start = [0.1,0.1]
    extrapol.fit(ana.err_func,start,plotdir=plotdir,prior=l_5)
    plotargs = extrapol.fitres.data[0]
    # NLO arguments need to have bootstrapsamples as first argument
    extrapol.mu_a0_pik_phys(cont_data.get('mpi_0'),cont_data.get('mk'),
                                     cont_data.get('fpi'),cont_data.get('r0'),
                                     meta=cont_data.get('meta'), iso_32=True)

################################################################################
#                   plot chiral extrapolation                                  #
################################################################################
    args = np.asarray([np.vstack((plotargs[:,0,0], plotargs[:,1,0]
      ,extrapol.x_data[r][0,0,3])).T for r in range(len(space))])
    # Plot the data the given function
    label=[r'$\mu_{\pi K}/f_{\pi}$',r'$\mu_{\pi K}\,a_{3/2}$',r' ',
           r'$(\mu_{\pi K}/f_{\pi})_{phys}$']
    filename = plotdir+'/mua0_decay_nlo_msfix_fse_M2B.pdf'
    chiral_plot = ana.LatticePlot(filename, join = False)
    #limits for x values in plot
    chiral_plot.plot_chiral_ext(extrapol,space,label, xlim=None,ylim=[-0.2,0.],
                                func=None, args=args,
                                calc_x = ana.calc_x_plot, ploterror=False,
                                kk=False, x_phys=0.8128,plotlim=[0.7,1.6],
                                argct="multiarg")

    # Plot NPLQCD Data
    # TODO: Dirty Hack at the moment
    #
    x_cmp = np.asarray([[1.332,0.01],[1.469,0.007],[1.731,0.007],
                        [1.869,0.005]])  
    y_cmp = np.asarray([[-0.1263,0.0075],[-0.155,0.04],[-0.213,0.012],
                        [-0.267,0.012]])
    #plt.errorbar(x_cmp[:,0],y_cmp[:,0],y_cmp[:,1],xerr=x_cmp[:,1],fmt='ko',
    #                 label=r'NPLQCD, $a=0.125$fm')
    # Prepare arguments for continuum curve
    args = np.vstack((plotargs[:,0,0], plotargs[:,1,0],
      np.zeros_like(plotargs[:,0,0]),np.ones_like(plotargs[:,0,0]),cont_data.get('l4'),cont_data.get('b0'))).T
    print("\nms:")
    print(ana.compute_error(ms))
    lim_x = [[0.01,75.],[ms[0],ms[0]],[cont_data.get('l4')[0],cont_data.get('l4')[0]],
        [cont_data.get('b0')[0],cont_data.get('b0')[0]]]
    chiral_plot.plot_cont(extrapol,ana.pik_I32_chipt_plot_cont,
                          lim_x,args,argct='multiarg',calc_x=ana.calc_x_plot_cont)
    chiral_plot.save()

    #filename = plotdir+'/mua0_decay_nlo_only_msfix_fse.pdf'
    #chiral_plot.new_file(filename)
    #label=[r'$\mu_{\pi K}/f_{\pi}$',
    #       r'$(\mu_{\pi K}\,a_{3/2}-(\mu_{\pi K}\,a_{3/2})_{LO})/\mu_{\pi K}\,a_{3/2}$',
    #       r' ',
    #       r'$(\mu_{\pi K}/f_{\pi})_{phys}$']
    #args = np.asarray([np.vstack((plotargs[:,0,0], plotargs[:,1,0],
    #  plotargs[:,2,0],extrapol.x_data[r][0,0,3])).T for r in range(len(space))])
    #chiral_plot.plot_chiral_ext(extrapol,space,label, xlim= lim_x,ylim=None,
    #                            func=ana.pik_I32_chipt_nlo_plot, args=args,
    #                            calc_x = ana.calc_x_plot, ploterror=False,
    #                            kk=False, x_phys=0.8128,plotlim=[0.5,2.],
    #                            argct="multiarg",sublo=True)

    # Prepare arguments for continuum curve
    args = np.vstack((plotargs[:,0,0], plotargs[:,1,0],
      np.zeros_like(plotargs[:,0,0]),np.ones_like(plotargs[:,0,0]))).T
    chiral_plot.plot_cont(extrapol,ana.pik_I32_chipt_nlo_plot,
                          lim_x,args,argct='multiarg',phys=False,calc_x=ana.calc_x_plot)
    chiral_plot.save()
    del chiral_plot
    extrapol.fitres.print_data(1)
    # calculate factor for converting to mpi_a0
    fac = cont_data.get('mpi_0')/ana.reduced_mass(cont_data.get('mpi_0'),
                                                  cont_data.get('mk'))
    print(fac.shape)
    
    header = ["#amu_l", "amu_s", "mpi", "dmpi", "mk", "dmk", "fpi", "dfpi",
              "r0/a", "d(r0/a)", "m_eta","dm_eta","mu a0", "d(mu a0)",
              "amu_s^phys","d(amu_s^phys)"]
    ana.print_summary(extrapol,header,amu_l_dict,amu_s_dict)
if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("Keyboard Interrupt")

