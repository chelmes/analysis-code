#!/usr/bin/python
################################################################################
#
# Author: Christopher Helmes (helmes@hiskp.uni-bonn.de)
# Date:   May 2017
#
# Copyright (C) 2017 Christopher Helmes
# 
# This program is free software: you can redistribute it and/or modify it under 
# the terms of the GNU General Public License as published by the Free Software 
# Foundation, either version 3 of the License, or (at your option) any later 
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with tmLQCD. If not, see <http://www.gnu.org/licenses/>.
#
################################################################################
#
# Fit mu*a_32 in NLO-chipt
# 
# The fitfunction reads:
# mu*a_3/2 = mu^2/(4*pi f^2_pi)(-1 + L_piK(Lambda) * 32*m_pi*m_K/f^2_pi
#                               -L_5(Lambda) * 16*m^2_pi/f^2_pi
#                               +Chi^I32_piK(Lambda,m_pi,m_K)/(16*pi^2*f^2_pi))
# Chi^I32_piK(Lambda,m_pi,m_K) is a NLO-function including chiral logarithms
################################################################################
# system imports
import sys
from scipy import stats
from scipy import interpolate as ip
import numpy as np
from numpy.polynomial import polynomial as P
import math
import matplotlib
matplotlib.use('Agg') # has to be imported before the next lines
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from matplotlib.backends.backend_pdf import PdfPages
import pandas as pd
# Christian's packages
sys.path.append('/hiskp4/helmes/projects/analysis-code/')
import analysis2 as ana

def main():
    # Get parameters from initfile
    if len(sys.argv) < 2:
        ens = ana.LatticeEnsemble.parse("A40.24.ini")
    else:
        ens = ana.LatticeEnsemble.parse(sys.argv[1])
    # second system argument is fixing for ms
    ms_fixing=sys.argv[2]
    # get data from input file
    space=ens.get_data("beta")
    latA = ens.get_data("namea")
    latB = ens.get_data("nameb")
    latD = ens.get_data("named")
    strangeA = ens.get_data("strangea")
    strangeB = ens.get_data("strangeb")
    strangeD = ens.get_data("stranged")
    strange_eta_A = ens.get_data("strange_alt_a")
    strange_eta_B = ens.get_data("strange_alt_b")
    strange_eta_D = ens.get_data("strange_alt_d")
   # keep seeds per zp method fixed
    zp_meth=ens.get_data("zp_meth")
    external_seeds=ens.get_data("external_seeds_%s"%(ms_fixing.lower()))
    continuum_seeds=ens.get_data("continuum_seeds_%s"%(ms_fixing.lower()))
    amulA = ens.get_data("amu_l_a")
    amulB = ens.get_data("amu_l_b")
    amulD = ens.get_data("amu_l_d")

    #dictionary of strange quark masses
    amusA = ens.get_data("amu_s_a")
    amusB = ens.get_data("amu_s_b")
    amusD = ens.get_data("amu_s_d")
    # dictionaries for chiral analysis
    lat_dict = ana.make_dict(space,[latA,latB,latD])
    amu_l_dict = ana.make_dict(space,[amulA,amulB,amulD])
    mu_s_dict = ana.make_dict(space,[strangeA,strangeB,strangeD])
    mu_s_eta_dict = ana.make_dict(space,[strange_eta_A,strange_eta_B,strange_eta_D])
    amu_s_dict = ana.make_dict(space,[amusA,amusB,amusD])
    print(amu_s_dict)
    #quark = ens.get_data("quark")
    datadir = ens.get_data("datadir") 
    plotdir = ens.get_data("plotdir") 
    resdir = ens.get_data("resultdir") 
    nboot = ens.get_data("nboot")
    # Prepare external data
    ext_data = ana.ExtDat(external_seeds,space,zp_meth)
    cont_data = ana.ContDat(continuum_seeds,zp_meth=zp_meth)
    fpi_raw = ana.read_extern("../plots2/data/fpi.dat",(1,2))
    print(fpi_raw)
    chipt_tree = lambda p,x : -x**2/(4.*np.pi) 
    read = True
    #------------------------- Setup objects -----------------------------------
    # First load the data from fixing the strange quark mass
    fix_ms = ana.ChirAna("pi-K_I32_chipt_%s%d"%(ms_fixing.upper(),zp_meth),
                         correlated=False,gamma=False, match=True, fit_ms =
                         True)
    ens_shape_chirana = (len(latA),len(latB),len(latD))
    print(ens_shape_chirana)
    # have 3 strange quark masses
    lyt_xvals = ana.generate_chirana_shape(space,ens_shape_chirana,3,2,1500)
    lyt_yvals = ana.generate_chirana_shape(space,ens_shape_chirana,3,1,1500) 
    #lyt_xvals = (3,ens_shape_chirana,3,2,1500)
    #lyt_yvals = (3,ens_shape_chirana,3,1,1500)
    fix_ms.create_empty(lyt_xvals,lyt_yvals,lat_dict=lat_dict)
    try:
        fix_ms.load(resdir)
    except:
        print("Could not load chiral analysis!")
    extrapol = ana.ChirAna("pi-K_I32_chipt_%s%d"%(ms_fixing.upper(),zp_meth),
                            correlated=False,gamma=True,debug=2)
    # have two x-values: mk/mpi, a/r0
    # determine size of objects from ensemble dictionary
    #TODO: write as function
    ens_shape_chirana = (len(latA),len(latB),len(latD))
    print(ens_shape_chirana)
    lyt_xvals = ana.generate_chirana_shape(space,ens_shape_chirana,1,1,1500)
    lyt_yvals = ana.generate_chirana_shape(space,ens_shape_chirana,1,1,1500)
    #lyt_xvals = (3,ens_shape_chirana,1,1,1500)
    #lyt_yvals = (3,ens_shape_chirana,1,1,1500)
    extrapol.create_empty(lyt_xvals,lyt_yvals,lat_dict=lat_dict)
    # copy over observables to extrapol 
    for i,a in enumerate(space):
        print("\nWorking at lattice spacing %s" %a)
        for j,e in enumerate(lat_dict[a]):
            # if using D30.48 modify lowest amus to 0.0115
            if e == 'D30.48':
                print("modifying lowest mu_s values")
                mu_s_dict[a][0] ='amu_s_115' 
                amu_s_dict[a][0]=0.0115
            for k,s in enumerate(amu_s_dict[a]):
                mk_fse=fix_ms.get_data((i,j,0,1),'x')
                mpi_fse=fix_ms.get_data((i,j,0,0),'x')
                mua32=fix_ms.get_data((i,j,0,0),'y')
                meta=fix_ms.get_data((i,j,0,4),'x')
                extrapol.add_data(mk_fse/mpi_fse, (i,j,0,0),dim='x')
                dummy, fpi = ana.prepare_fk(fpi_raw,e,1500)
                print("0th Bootstrapsample for fpi: %f" %fpi[0])
                tmp_y = ana.gamma_pik(mpi_fse, mk_fse,
                                      mua32, fpi,
                                      meta)
                extrapol.add_data(tmp_y,(i,j,0,0),dim='y')
    print("\nSetup complete, begin chiral analysis")
    observables=['fit_start','fit_end','chi2 reduced', 'p_val', 'L_5','L_piK',
                 'mu_a32_phys','Mpi_a32','Mpi_a12','tau']
    fitresults_gamma = pd.DataFrame(columns=observables)
    filename = plotdir+'/gamma_pik_fse_%s%d.pdf'%(ms_fixing.upper(),zp_meth)
    chiral_plot = ana.LatticePlot(filename, join = False)
    ranges=[[0,2.5],[1.4,2.5],[1.5,2.5]]
    for cut in ranges:
        # Include bootstrapped L_piK as a prior value taken from NPLQCD 
        l_5 = np.atleast_2d(ana.draw_gauss_distributed(5.41e-3,3e-5,(1500,),origin=True))
        #l_5 = np.atleast_2d(ana.draw_gauss_distributed(5.65e-3,2e-5,(1500,),origin=True))
        #For future use
        start = [0.1,0.1]
        extrapol.fit(ana.wrap_test.gamma_errfunc,start,prior=l_5,xcut=cut)
        l_5 = extrapol.fitres.data[0][:,0,0]
        l_pik = extrapol.fitres.data[0][:,1,0]
        chi_sq_reduced = np.full_like(l_5[0],
                                      extrapol.fit_stats[0][1]/extrapol.fit_stats[0][0])
        pval = np.full_like(l_5[0],extrapol.fit_stats[0][2])
        fitrange_start = np.full_like(l_5[0],cut[0])
        fitrange_end = np.full_like(l_5[0],cut[1])
        data_per_cut=[fitrange_start,fitrange_end,chi_sq_reduced,pval,l_5,l_pik]
        plotargs = extrapol.fitres.data[0]
        args = np.asarray([plotargs[:,slice(0,2),0] for i in range(1)])
        # Plot the data the given function
        label=[r'$M_{K}/M_{\pi}$',r'$\Gamma$',r' ',
               r'$(M_{K}/M_{\pi}_phys$']
        print("args have shape")
        print(args[0].shape)
        line = lambda p,x: p[:,0]-2*x*p[:,1]
        chiral_plot.plot_chiral_ext(extrapol,space,label,xlim=[0,2.2], args=args,
                                    ylim=[-0.015,0.010], func=line, ploterror=True,
                                    kk=False,xcut=cut, gamma=True,plotlim=[0.,2.2])
        label[1]=r'$\chi$ '
        #chiral_plot.plot_chi_values(extrapol,space,line,data_label=r'$\chi$',
        #                            label=label,plotlim=[0,2.2],prior=l_5)
        
        extrapol.mu_a0_pik_phys(cont_data.get("mpi_0"),cont_data.get("mk"),
                                         cont_data.get("fpi"),
                                         meta=cont_data.get("meta"),iso_32=True)
        mu_a32_phys = extrapol.phys_point_fitres.data[0][:,0]
        data_per_cut.append(mu_a32_phys)
        header = ["#amu_l", "mpi/mk", "d(mpi/mk)", "Gamma", "d(Gamma)", "mu_match",
            "d(mu_match)"]
        ana.print_summary(extrapol,header,amu_l_dict,amu_s_dict)
        mupik_phys =ana.reduced_mass(cont_data.get("mpi_0"),cont_data.get("mk")) 
        mpi_by_mupik = cont_data.get("mpi_0")/mupik_phys
        print("mpi a_{3/2}:")
        mpi_a32 = mu_a32_phys*mpi_by_mupik 
        data_per_cut.append(mpi_a32)
        print(ana.compute_error(mpi_a32))
        extrapol.mu_a0_pik_phys( cont_data.get("mpi_0"),cont_data.get("mk"),
                                         cont_data.get("fpi"),
                                         meta=cont_data.get("meta"),iso_32=False)
        print("mpi a_{1/2}:")
        mpi_a12 =extrapol.phys_point_fitres.data[0][:,0]*mpi_by_mupik
        data_per_cut.append(mpi_a12)
        print(ana.compute_error(mpi_a12))
        # calculate the isospin odd scattering length in units of mpi
        a_odd = (mpi_a12-mpi_a32)/3.
        print("mpi a^-:")
        print(ana.compute_error(a_odd))
        
        tau = ana.pi_k_tau(mpi_a12,mpi_a32,cont_data)
        data_per_cut.append(tau)
        fitresult_dataframe=pd.DataFrame({key:value for key,
                                          value in zip(observables,data_per_cut)})
        fitresults_gamma=fitresults_gamma.append(fitresult_dataframe)
        print("tau_1s in s:")
        print(ana.compute_error(tau))
        chiral_plot.save()
    del chiral_plot
    fitresults_gamma.info()
    process_id = 'pik_gamma_M%d%s'%(zp_meth, ms_fixing.upper())
    hdf_filename = resdir+process_id+'.h5'
    hdfstorer = pd.HDFStore(hdf_filename)
    hdfstorer[process_id] = fitresults_gamma
    del hdfstorer
    #fitresults_gamma.to_pickle(resdir+'/pik_gamma_M%d%s.pkl'%(zp_meth, ms_fixing.upper()))
if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("Keyboard Interrupt")


