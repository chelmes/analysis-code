#!/hadron/knippsch/Enthought/Canopy_64bit/User/bin/python

################################################################################
#
# Author: Christopher Helmes (helmes@hiskp.uni-bonn.de)
# Date:   July 2017
#
# Copyright (C) 2017 Christopher Helmes
# 
# This program is free software: you can redistribute it and/or modify it under 
# the terms of the GNU General Public License as published by the Free Software 
# Foundation, either version 3 of the License, or (at your option) any later 
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with tmLQCD. If not, see <http://www.gnu.org/licenses/>.
#
################################################################################
#
# Test size of the lattice artifact in ChPT extrapolations
# 
# The three ensembles B55.32 A80.24 and D45.32 are nearly at the same physical
# pion mass. They can be used to check the dpendence on lattice artefacts. To do
# so we first need to fix the strange quark mass
#
################################################################################
# system imports
import sys
from scipy import stats
from scipy import interpolate as ip
import numpy as np
from numpy.polynomial import polynomial as P
import math
import matplotlib
matplotlib.use('Agg') # has to be imported before the next lines
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from matplotlib.backends.backend_pdf import PdfPages

# Christian's packages
sys.path.append('/hiskp2/helmes/projects/analysis-code/')
import analysis2 as ana

def main():
    # Get parameters from initfile
    if len(sys.argv) < 2:
        ens = ana.LatticeEnsemble.parse("A40.24.ini")
    else:
        ens = ana.LatticeEnsemble.parse(sys.argv[1])

    # get data from input file
    lat = ens.name()
    latA = ens.get_data("namea")
    latB = ens.get_data("nameb")
    latD = ens.get_data("named")
    strangeA = ens.get_data("strangea")
    strangeB = ens.get_data("strangeb")
    strangeD = ens.get_data("stranged")
    space=['A','B','D']
    seeds = [5859, 5672, 4104, 5382, 8439, 6186]
    seeds2 = [9042, 9280, 2219, 4911, 2506]
    lat_dict = {'A':latA,'B':latB,'D':latD}
    #dicitionary of light quark masses
    amulA = ens.get_data("amu_l_a")
    amulB = ens.get_data("amu_l_b")
    amulD = ens.get_data("amu_l_d")
    amu_l_dict = {'A': amulA,'B': amulB, 'D': amulD}

    #dictionary of strange quark masses
    mu_s_dict = {'A': strangeA,'B': strangeB, 'D': strangeD}
    amusA = ens.get_data("amu_s_a")
    amusB = ens.get_data("amu_s_b")
    amusD = ens.get_data("amu_s_d")
    amu_s_dict = {'A': amusA,'B': amusB, 'D': amusD}
    print(amu_s_dict)
    datadir = ens.get_data("datadir") 
    plotdir = ens.get_data("plotdir") 
    resdir = ens.get_data("resultdir") 
    nboot = ens.get_data("nboot")
    # Prepare inputs
    ext_data = ana.ExtDat(seeds,space,1)
    #cont_dat = ana.ContDat(seeds2,zp_meth="phys")
    fpi_raw = ana.read_extern("../plots2/data/fpi.dat",(1,2))
    print(fpi_raw)
    zp_meth="phys"
    #############################################################################
    #                    Matching 
    #############################################################################
    #------------------------- Setup objects -----------------------------------
    line = lambda p, x : p[0]*x[:,0]+p[1]
    line_plot = lambda p, x : p[:,0]*x+p[:,1]
    disc_eff = ana.ChirAna("mu_a32_at_mk_mpi_diff_zp1",match=True,
                            correlated=False,combined=False)
    # have two x-values: mpi,r0
    ens_shape_disc_eff = (len(latA),len(latB),len(latD))
    print(ens_shape_disc_eff)
    lyt_xvals = (3,ens_shape_disc_eff,1,2,1500)
    lyt_yvals = (3,ens_shape_disc_eff,1,1,1500)
    disc_eff.create_empty(lyt_xvals,lyt_yvals,lat_dict=lat_dict)
    cont_data = ana.ContDat(seeds2, zp_meth)
    r0mkdiff_sq = ana.r0mk_mpi_diff_phys(cont_data)
    print("Physical value of M_S^2:")
    print(ana.compute_error(r0mkdiff_sq))
    print("\n")
    print("\nSetup complete, begin chiral analysis")
    for i,a in enumerate(space):
        print("\nWorking at lattice spacing %s" %a)
        for j,e in enumerate(lat_dict[a]):
            # if using D30.48 modify lowest amus to 0.0115
            if e == 'D30.48':
                print("modifying lowest mu_s values")
                mu_s_dict[a][0] ='amu_s_115' 
                amu_s_dict[a][0]=0.0115
            print("\nMatch ensemble %s" %e)
        #-------------------------- Evaluate at x-values -----------------------------
            
            # Evaluation works with mu_pik a_32 as y-data and a^2 (M^2_K - 0.5 M^2_\pi) as
            # x-data
            # TODO: Only Workaround feasible, use two match results, then copy over
            # y-data of one to x-data of other
            print("\nEvaluate ensemble %s" %e)
            # initialize a match result object for evaluating MK a0
            mk_diff = ana.MatchResult("mua32_M1A_%s" % e,save = datadir+'%s/'%e)
            ana.MatchResult.create_empty(mk_diff,1500,3)
            # Load data to match each ensemble
            dat_names = [datadir+'%s/' % (e) +s+'/fit_k_unit_%s.npz' % (e) for s in mu_s_dict[a]]
            mk_meas = ana.init_fitreslst(dat_names)
            # load squared kaon mass as y-data
            mk_diff.load_data(mk_meas,1,amu_s_dict[a],square=True,mult=None)
            # Apply finite size corrections
            print("squared M_K added: %f" % mk_diff.obs[0,0])
            # append squared pion mass from extern data multiplied by 0.5 
            #read in pion mass from fitresult
            mpi = "%s/%s/%s/fit_pi_unit_%s.npz"%(datadir,e,s,e)
            # subtract -0.5 M_pi from kaon mass
            mk_diff.add_extern_data(mpi,e,idx=None,square=True,read='fit_mpi',
                                    op='min',fse=False,r0=False,fac=0.5)
            print("... after subtraction of 1/2 M_pi: %f" % mk_diff.obs[0,0])

            # get MK a0 for all strange quark masses at once
            mu_a0 = ana.MatchResult("mua32_M1A_%s" %e,save=datadir+'%s/'%e)
            ana.MatchResult.create_empty(mu_a0,1500,3)
            dat_names = [datadir+'%s/' % (e) +s+'/mu_a0_TP0_%s.npz' % (e) for s in mu_s_dict[a]]
            mu_a0_meas = ana.init_fitreslst(dat_names)
            mu_a0.load_data(mu_a0_meas,0,amu_s_dict[a],square=False)
            
            # Copy over y-data from mk_diff as new x-data
            mu_a0.amu = mk_diff.obs

            # Evaluate MK a0 at matched amu_s value, we are still in the amu_s
            # interval which allows interpolation
            label = [r'$a^2(M_K^2-0.5M^2_{\pi})$',r'$\mu_{\pi K} a_{3/2}$',
                     r'$a^2(M_K^2-0.5M^2_{\pi}) = (aM_s^{\mathrm{ref}})^2$']
            evl_x = ana.mk_mpi_diff_phys(a, nboot, cont_data, ext_data)
            print(ana.compute_error(evl_x))
            mu_a0.eval_at(evl_x,plotdir=plotdir,
                           ens=e,plot=True,label=label, meth=2)
            # Add mu_s values from matching
            disc_eff.add_data(mu_a0.amu_match[2],(i,j,0,0),'mu')
            # Add Mu a0 data to chiral analysis object 
            disc_eff.add_data(mu_a0.eval_obs[2],(i,j,0,0),'y')
            # Add r0mpi values
            _tmp_x = ana.FitResult.read("%s/%s/%s/fit_pi_unit_%s.npz"% (datadir,e,s,e))
            #disc_eff.add_data(_tmp_x.data[0][:,1,0],(i,j,0,0),dim='x')
            disc_eff.x_data[i][j,0,0] = 1/(ext_data.get(a,'r0'))**2
    start = [0.1,0.1]
    disc_eff.fit(line,start,plotdir=plotdir)
    label=[r'$(a/r_0)^2$',r'$\mu_{\pi K}\,a_{3/2}$',r' ',
           r'$(\mu_{\pi K}/f_{\pi})_{phys}$']
    filename = plotdir+'/mu_a0_disc_eff.pdf'
    chiral_plot = ana.LatticePlot(filename, join = False)
    #limits for x values in plot
    chiral_plot.plot_chiral_ext(disc_eff,space,label,
                                xlim=[0.,0.05],ylim=[-0.35,0.],func=None,
                                kk=False,gamma=True, plotlim = [0.,0.05])
    chiral_plot.plot_cont(disc_eff,line_plot,xlim=[0.,0.05],
                          args=disc_eff.fitres.data[0][...,0],phys=False)
    chiral_plot.save()
    del chiral_plot

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("Keyboard Interrupt")


