#!/hadron/knippsch/Enthought/Canopy_64bit/User/bin/python
##!/usr/bin/python
################################################################################
#
# Author: Christian Jost (jost@hiskp.uni-bonn.de)
# Date:   Februar 2015
#
# Copyright (C) 2015 Christian Jost
# 
# This program is free software: you can redistribute it and/or modify it under 
# the terms of the GNU General Public License as published by the Free Software 
# Foundation, either version 3 of the License, or (at your option) any later 
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with tmLQCD. If not, see <http://www.gnu.org/licenses/>.
#
################################################################################
#
# Function: This is the start of the eta/eta' analysis program
#
# For informations on input parameters see the description of the function.
#
################################################################################

import sys
import numpy as np
import scipy
import matplotlib
matplotlib.use('Agg') # has to be imported before the next lines
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages

import analysis2 as ana

fchiptLO = lambda p, x: -x*x/(8.*np.pi)
fchiptNLO = lambda p, x: -x*x/(8.*np.pi)*(1+x*x/(16*np.pi*np.pi)*(3.*np.log(x*x)-1.-p))

def ottnad_f_pi():
    """The values of f_pi from Konstantins diss."""
    p_fpi = {"A30.32": (0.06452, 0.00021),
             "A40.20": (0.06198, 0.00057),
             "A40.24": (0.06577, 0.00024),
             "A40.32": (0.06839, 0.00018),
             "A60.24": (0.07209, 0.00020),
             "A80.24": (0.07581, 0.00013),
             "A100.24": (0.07936, 0.00014),
             "A80.24s": (0.07845, 0.00016),
             "A100.24s": (0.07857, 0.00014),
             "B25.32": (0.05728, 0.00021),
             "B35.48": (0.06158, 0.00008),
             "B35.32": (0.06105, 0.00017),
             "B55.32": (0.06545, 0.00011),
             "B85.24": (0.07039, 0.00026),
             "D15.48": (0.04373, 0.00019),
             "D30.48": (0.04735, 0.00015),
             "D45.32": (0.04825, 0.00014),
             # values for Nf=2 from arxiv 1507.05068
             "cA2.09.48": (0.06042, 0.00011),
             "cA2.30.24": (0.06104, 0.00043),
             "cA2.60.24": (0.06946, 0.00022),
             "cA2.60.32": (0.07043, 0.00019)}
    return p_fpi

def K_fpi():
    """The values for the finite size corrections for f_pi."""
    k_fpi = {"A30.32": (0.9757, 0.0061),
            "A40.20": (np.nan,)*2,
            "A40.24": (0.9406, 0.0084),
            "A40.32": (0.9853, 0.0048),
            "A60.24": (0.9716, 0.0037),
            "A80.24": (0.9839, 0.0022),
            "A100.24": (0.9900, 0.0015),
            "A80.24s": (np.nan,)*2,
            "A100.24s": (np.nan,)*2,
            "B25.32": (0.9695, 0.0065),
            "B35.48": (1.0, 0.01,),
            "B35.32": (0.9794, 0.0027),
            "B55.32": (0.9920, 0.0010),
            "B85.24": (0.9795, 0.0024),
            "D15.48": (0.9762, 0.0025),
            "D30.48": (0.9938, 0.0005),
            "D45.32": (0.9860, 0.0013), # values for D20.48
            # not known
            "cA2.09.48": (1.0, 0.001),
            "cA2.30.24": (1.0, 0.001),
            "cA2.60.24": (1.0, 0.001),
            "cA2.60.32": (1.0, 0.001)}
    return k_fpi

def K_mpi():
    """The values for the finite size correction for m_pi"""
    k_mpi = {"A30.32": (1.0081, 0.0052),
             "A40.20": (np.nan,)*2,
             "A40.24": (1.0206, 0.0095),
             "A40.32": (1.0039, 0.0028),
             "A60.24": (1.0099, 0.0049),
             "A80.24": (1.0057, 0.0029),
             "A100.24": (1.0037, 0.0019),
             "A80.24s": (np.nan,)*2,
             "A100.24s": (np.nan,)*2,
             "B25.32": (1.0136, 0.0060),
             "B35.48": (1.0, 0.01),
             "B35.32": (1.0069, 0.0032),
             "B55.32": (1.0027, 0.0014),
             "B85.24": (1.0083, 0.0028),
             "D15.48": (1.0081, 0.0022),
             "D30.48": (1.0021, 0.0007),
             "D45.32": (1.0047, 0.0013), # values for D20.48
             # not known
             "cA2.09.48": (1.0, 0.001),
             "cA2.30.24": (1.0, 0.001),
             "cA2.60.24": (1.0, 0.001),
             "cA2.60.32": (1.0, 0.001)}
    return k_mpi

def mf_paper():
    """The m_pi/f_pi values from the paper."""
    p_mf = {"A30.32": (1.915, 0.010),
             "A40.20": (np.nan,)*2,
             "A40.24": (2.202, 0.013),
             "A40.32": (2.068, 0.008),
             "A60.24": (2.396, 0.011),
             "A80.24": (2.623, 0.007),
             "A100.24": (2.788, 0.007),
             "A80.24s": (np.nan,)*2,
             "A100.24s": (np.nan,)*2,
             "B25.32": (1.865, 0.010),
             "B35.48": (2.014, 0.010),
             "B35.32": (2.047, 0.011),
             "B55.32": (2.352, 0.007),
             "B85.24": (2.736, 0.015),
             "D15.48": (1.590, 0.010),
             "D30.48": (2.070, 0.010),
             "D45.32": (2.485, 0.012),
             # from arxiv 1507.05068, (CD values)
             "cA2.09.48": (1.0254, 0.0031),
             "cA2.30.24": (1.879, 0.022),
             "cA2.60.24": (2.30, 0.11),
             "cA2.60.32": (2.2395, 0.0076)}
    return p_mf

def carsten_plot():
    lat = ["A30.32", "A40.32", "A60.24", "B55.32", "D45.32", "B35.32", "B35.48", "D15.48", "D30.48", "B25.32"]
    #lat = ["A30.32", "A40.32", "A40.24", "A40.20", "A60.24", "A80.24", "A100.24", "B55.32", "D45.32", "B35.32", "B85.24", "B35.48", "D15.48", "D30.48", "B25.32"]
    mpia0 = [-0.1321, -0.1550069, -0.2156216, -0.2182879, -0.2637024, -0.150437, -0.1499361, -0.1154344, -0.1855031, -0.134437]
    dmpia0  = [0.008029795, 0.005895626, 0.004708836, 0.005729009, 0.01327882, 0.006450454, 0.01511733, 0.01831133, 0.03490023, 0.008715619]
    Mfps = [1.853852, 2.033552, 2.305531, 2.327247, 2.438928, 1.990928, 2.010947, 1.53968, 2.05281, 1.767732]
    dMfps = [0.0177639, 0.01091404, 0.01788132, 0.007921204, 0.01276244, 0.01393307, 0.01311651, 0.01148326, 0.009654323, 0.02004424]
    return [lat, mpia0, dmpia0, Mfps, dMfps]

def a0_corrections(mpi, L):
    mpiL = mpi * L
    _sum = 0.
    c = [0, 6, 12, 8, 6, 24]
    for i in range(1,6):
        tmp = np.sqrt(i) * mpiL
        tmp2 = np.exp(-tmp) / np.sqrt(tmp) * (1. - 227./(24. * tmp))
        _sum += c[i] * tmp2
    res = -mpi / (2 * np.pi) * _sum
    return ana.mean_std(res)

def read_data(datafolder, lattices, d2=0):
    verbose=False
    ## other variables
    filempi = "fit_pi.npz"
    par_mpi=1
    #fileam = "am_pi_TP%d.npz" % d2
    fileam = "am_pi_ratio_TP%d.npz" % d2

    # get reference values
    fpi = ottnad_f_pi()
    k_fpi = K_fpi()
    k_mpi = K_mpi()
    p_mf = mf_paper()

    # read data
    readnewdata = True
    fname = "%s/summary/collected_data.npz" % datafolder
    if readnewdata:
        summ_ampi, summ_mf = [], []
        usumm_ampi, usumm_mf = [], []
        for l, latt in enumerate(lattices):
            summ_ampi.append([])
            summ_mf.append([])
            usumm_ampi.append([])
            usumm_mf.append([])
            for lat in latt:
                print("read data for %s" % lat)
                # read data
                try:
                    ampi = ana.FitResult.read("%s/%s/%s" % (datafolder, lat, fileam))
                except:
                    print("file: %s/%s/%s" % (datafolder, lat, fileam))
                    raise
                try:
                    mpi = ana.FitResult.read("%s/%s/%s" % (datafolder, lat, filempi))
                except:
                    print("file: %s/%s/%s" % (datafolder, lat, filempi))
                    raise
                nsam = ampi.data[0].shape[0]

                # calc mean
                ampi.calc_error()
                mpi.calc_error()

                # save uncorrected values
                np.random.seed(1228)
                tmp = p_mf[lat][1]* np.random.randn(nsam) + p_mf[lat][0]
                usumm_ampi[-1].append([ampi.error[0][0][0],
                                       ampi.error[0][1][0],
                                       ampi.error[0][2][0][0],
                                       ampi.error[0][2][0][1]])
                usumm_mf[-1].append([tmp, np.std(tmp), 0., 0.])

                # calc fse corrections
                a0_corr = a0_corrections(mpi.error[par_mpi][0][0], int(lat[-2:]))
                ampi.fse_divide(*k_mpi[lat])
                ampi.fse_subtract(*a0_corr)
                summ_ampi[-1].append([ampi.error[0][0][0],
                                      ampi.error[0][1][0],
                                      ampi.error[0][2][0][0],
                                      ampi.error[0][2][0][1]])
                fse_fpi = k_fpi[lat][1]* np.random.randn(nsam) + k_fpi[lat][0]
                fse_mpi = k_mpi[lat][1]* np.random.randn(nsam) + k_mpi[lat][0]
                tmp = tmp * fse_fpi / fse_mpi
                summ_mf[-1].append([tmp, np.std(tmp), 0., 0.])
        summ_ampi = np.asarray(summ_ampi)
        summ_mf = np.asarray(summ_mf)
        usumm_ampi = np.asarray(usumm_ampi)
        usumm_mf = np.asarray(usumm_mf)
        np.savez(fname, ampi=summ_ampi, mf=summ_mf, uampi=usumm_ampi, umf=usumm_mf)
    else:
        print("read collected data")
        tmpfile = np.load(fname)
        summ_ampi = tmpfile["ampi"]
        summ_mf = tmpfile["mf"]
        usumm_ampi = tmpfile["uampi"]
        usumm_mf = tmpfile["umf"]
        del tmpfile
    return summ_ampi, summ_mf, usumm_ampi, usumm_mf

def all_fit(x, y, datafolder, xcut, readfit=True):
    if not readfit:
        print("NLO fit")
        fit_chi = ana.LatticeFit(fchiptNLO)
        fitres = fit_chi.chiral_fit(x, y, xcut=xcut)
        if xcut:
            fitres.save("%s/summary/chiral_fit_xcut%.1f.npz" % (datafolder, xcut))
        else:
            fitres.save("%s/summary/chiral_fit.npz" % (datafolder))
    else:
        if xcut:
            fitres = ana.FitResult.read("%s/summary/chiral_fit_xcut%.1f.npz" % (datafolder, xcut))
        else:
            fitres = ana.FitResult.read("%s/summary/chiral_fit.npz" % (datafolder))
    fitres.print_data()
    if xcut:
        dof = np.count_nonzero(x[:,0] < xcut)
        print("xcut = %.1f" % xcut)
    else:
        dof = x.shape[0]
    print("chi2 / dof = %.3f / %d" % (fitres.chi2[0][0][0], dof - 1))
    print("pval = %.3e" % (1. - scipy.stats.chi2.cdf(fitres.chi2[0][0][0], dof - 1)))
    retval = fitres.error[0]

    # get the physical value of a_0*m_pi
    # m_pi/f_pi|phys = 1.0703
    mfp = 1.0703
    mf_phys = fchiptNLO(retval[0][0], mfp)
    mf_p = ana.mean_std(mf_phys)
    #print("m_pi/f_pi|phys = %.5f +- %.5f" %(mf_p[0], mf_p[1]))

    return fitres.error[0], mfp, mf_p

def plot_cmp_to_carsten(summ_mf, summ_ampi):
    fmt = ["or", "sb", "^c", "Dg"]
    labels = ["A ensembles", "B ensembles", "tmClover Ensembles", "D ensembles"]
    cdata = carsten_plot()
    for i, mf in enumerate(summ_mf):
        x = [d[0][0] for d in mf]
        y = [d[0][0] for d in summ_ampi[i]]
        dx = [d[1] for d in mf]
        dy = np.asarray([d[1] for d in summ_ampi[i]])
        dy1 = np.asarray([d[2] for d in summ_ampi[i]])
        dy2 = np.asarray([d[3] for d in summ_ampi[i]])
        dytot = [np.sqrt(dy**2 + dy1**2), np.sqrt(dy**2 + dy2**2)]
        plt.errorbar(x, y, yerr=dytot, xerr=dx, fmt=fmt[i], label=labels[i])
    for i, latt in enumerate(lattices):
        x, y, dx, dy = [], [], [], []
        for lat in latt:
            try:
                j = cdata[0].index(lat)
            except ValueError:
                #print("%s not found" % lat)
                continue
            x.append(cdata[3][j])
            y.append(cdata[1][j])
            dx.append(cdata[4][j])
            dy.append(cdata[2][j])
            #print("%9s (%.3f +- %.3f, %.3f +- %.3f)" % (lat, x[-1], dx[-1], y[-1], dy[-1]))
        plt.errorbar(x, y, yerr=dy, xerr=dx, fmt=fmt[i], label=labels[i], mfc="None")
    plt.grid(True)
    plt.xlim([1.5,2.5])

def cmp_to_uncorrected(summ_mf, summ_ampi, usumm_mf, usumm_ampi):
    fmt = ["or", "sb", "^c", "Dg"]
    labels = ["A ensembles", "B ensembles", "tmClover ensembles", "D ensembles"]
    for i, mf in enumerate(summ_mf):
        x = [d[0][0] for d in mf]
        y = [d[0][0] for d in summ_ampi[i]]
        dx = [d[1] for d in mf]
        dy = np.asarray([d[1] for d in summ_ampi[i]])
        dy1 = np.asarray([d[2] for d in summ_ampi[i]])
        dy2 = np.asarray([d[3] for d in summ_ampi[i]])
        dytot = [np.sqrt(dy**2 + dy1**2), np.sqrt(dy**2 + dy2**2)]
        plt.errorbar(x, y, yerr=dytot, xerr=dx, fmt=fmt[i], label=labels[i])
    for i, mf in enumerate(usumm_mf):
        x = [d[0][0] for d in mf]
        y = [d[0][0] for d in usumm_ampi[i]]
        dx = [d[1] for d in mf]
        dy = np.asarray([d[1] for d in usumm_ampi[i]])
        dy1 = np.asarray([d[2] for d in usumm_ampi[i]])
        dy2 = np.asarray([d[3] for d in usumm_ampi[i]])
        dytot = [np.sqrt(dy**2 + dy1**2), np.sqrt(dy**2 + dy2**2)]
        plt.errorbar(x, y, yerr=dytot, xerr=dx, fmt=fmt[i], label="", mfc="None")
    plt.grid(True)
    plt.legend(numpoints=1)

def print_summary(data, datafolder, plotfolder, lattices):
    """Print a summary of the lattices given.

    Args:
        datafolder: where the raw data is stored
        plotfolder: where to store the plots
        lattices: list of lattices to work on
    """
    debug=False
    verbose=False
    xcut = 2.5
    summ_ampi = data[0]
    summ_mf = data[1]
    usumm_ampi = data[2]
    usumm_mf = data[3]

    # regroup data for fit
    all_data_x, all_data_y = [], []
    for mf in summ_mf:
        for d in mf:
            all_data_x.append(d[0])
    for ampi in summ_ampi:
        for d in ampi:
            all_data_y.append(d[0])
    all_data_x = np.asarray(all_data_x)
    all_data_y = np.asarray(all_data_y)
    if debug:
        print(all_data_x.shape)
        print(all_data_x)
        print(all_data_y.shape)
        for dx, dy in zip(all_data_x, all_data_y):
            tx = ana.mean_std(dx)
            ty = ana.mean_std(dy)
            print("(%.3f +- %.3f, %.3f +- %.3f)" % (tx[0], tx[1], ty[0], ty[1]))

    # fit and evaluate chiPT at physical value
    retval, mfp, mf_p = all_fit(all_data_x, all_data_y, datafolder, xcut, readfit=True)

    # open plot file
    if xcut:
        plotter = ana.LatticePlot("%s/ampi_mfpi_xcut%.1f_TP%d.pdf" % (plotfolder, xcut, 0))
    else:
        plotter = ana.LatticePlot("%s/ampi_mfpi_TP%d.pdf" % (plotfolder, 0))
    # set title etc.
    plotter.set_title("", ["M$_\pi$/f$_\pi$", "M$_\pi$a$_0$"])

    # plot the data
    fmt = ["or", "sb", "^c", "Dg"]
    labels = ["A ensembles", "B ensembles", "tmClover Ensembles", "D ensembles"]
    for i, mf in enumerate(summ_mf):
        if not mf:
            continue
        x = [d[0][0] for d in mf]
        y = [d[0][0] for d in summ_ampi[i]]
        dx = [d[1] for d in mf]
        dy = np.asarray([d[1] for d in summ_ampi[i]])
        dy1 = np.asarray([d[2] for d in summ_ampi[i]])
        dy2 = np.asarray([d[3] for d in summ_ampi[i]])
        dytot = [np.sqrt(dy**2 + dy1**2), np.sqrt(dy**2 + dy2**2)]
        plt.errorbar(x, y, yerr=dytot, xerr=dx, fmt=fmt[i], label="")
        plt.errorbar(x, y, yerr=dy, xerr=dx, fmt=fmt[i], label=labels[i])

    # plot ChiPT formula
    plotter.plot_func(fchiptLO, None, [1., 3.], "LO ChiPT", fmt="--k", ploterror=False)
    #plotter.plot_func(fchiptNLO, 3.79, [1., 3.], "NLO ChiPT", fmt="--k")
    plotter.plot_func(fchiptNLO, np.atleast_2d(retval[0][0]).T, [1., 3.], "NLO ChiPT")
    if xcut:
        y = fchiptNLO(retval[0][0][0], xcut)
        plt.vlines(xcut, 0.8*y, 1.2*y, colors="k", label="")
        plt.hlines(0.8*y, xcut*0.98, xcut, colors="k", label="")
        plt.hlines(1.2*y, xcut*0.98, xcut, colors="k", label="")

    # plot extrapolated value
    #plt.errorbar(1.1, -0.044, fmt='^k', label="extrapol. from paper")
    #plt.errorbar(mfp, mf_p[0], mf_p[1], fmt='^m', label="extrapol.")

    plt.legend(numpoints=1, fontsize="small")
    plt.grid(True)
    plt.ylim([-0.35, 0.])
    plotter.save()

    # compare to Carsten data
    #plotter.set_title("", ["M$_\pi$/f$_\pi$", "M$_\pi$a$_0$"])
    #plot_cmp_to_carsten(summ_mf, summ_ampi)
    #plotter.save()

    # compare to uncorrected data
    plotter.set_title("", ["M$_\pi$/f$_\pi$", "M$_\pi$a$_0$"])
    cmp_to_uncorrected(summ_mf, summ_ampi, usumm_mf, usumm_ampi)
    plotter.save()

    # plot histogram
    #if xcut:
    #    plotter.new_file("%s/hist_l_pipi_xcut%.1f_TP%d.pdf" % (plotfolder, xcut, 0))
    #else:
    #    plotter.new_file("%s/hist_l_pipi_TP%d.pdf" % (plotfolder, 0))
    #labels = ["l$_{\pi\pi}$ fit results", "l$_{\pi\pi}$", "l$_{\pi\pi}$"]
    #plotter.histogram(fitres, labels, 20, 0)
    del plotter

    return

def main():
    d0 = np.array([0., 0., 0.]) # total momentum of the system
    s = 1
    # left out A40.20 since f_pi not known
    # D30.48 missing
    #Aens = ["A30.32", "A40.32", "A60.24"]
    #Aens = []
    #Bens, Dens = [], []
    Aens = ["A30.32", "A40.24", "A40.32", "A60.24",
            "A80.24", "A100.24"]
    Bens = ["B25.32", "B35.48", "B55.32", "B85.24"]
    Dens = ["D15.48", "D30.48", "D45.32"]
    #Cens = []
    Cens = ["cA2.09.48", "cA2.30.24", "cA2.60.32"]
    #Aens = ["A30.32", "A40.32", "A60.24",
    #        "A80.24", "A100.24"]
    #Bens = ["B35.32", "B55.32", "B85.24"]
    #Dens = ["D45.32"]
    datafolder = "./data/I2/"
    plotfolder = "./plots/I2/summary/"
    data = read_data(datafolder, [Aens, Bens, Cens, Dens])
    print_summary(data, datafolder, plotfolder, [Aens, Bens, Cens, Dens])
    return

# make this script importable, according to the Google Python Style Guide
if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
