#!/hadron/knippsch/Enthought/Canopy_64bit/User/bin/python
#!/usr/bin/python2

import sys
import numpy as np

import analysis2 as ana

def main():
    # parse the input file
    if len(sys.argv) < 2:
        ens = ana.LatticeEnsemble.parse("A40.24.ini")
    else:
        ens = ana.LatticeEnsemble.parse(sys.argv[1])

    # read settings

    # get data from input file
    lat = ens.name()
    L = ens.L()
    datadir = "/".join((ens.get_data("datadir"), lat))
    plotdir = "/".join((ens.get_data("plotdir"), lat))
    #datadir = ens.get_data("datadir")
    #plotdir = ens.get_data("plotdir")
    d2 = ens.get_data("d2")
    d = ens.get_data("d")

    # single particle correlator
    print("read single particle corrs")
    picorr = ana.Correlators.read("%s/corr_pi.npy" % (datadir))
    pifit = ana.FitResult.read("%s/fit_pi.npz" % (datadir))
    pifit.print_data(1)
    #pifit.print_details()

    # two particle correlator
    print("\n\nread four point function")
    print(datadir)
    pipifit = ana.FitResult.read("%s/fit_pipi_TP%d.npz" % (datadir, d2))
    pipifit.print_data(1)
    #pipifit.print_details()

    calcEcm = True
    if calcEcm:
        Ecm = pipifit.to_CM(1, L=L, d=d)
        Ecm.save("%s/Ecm_TP%d.npz" % (datadir, d2))
    else:
        Ecm = ana.FitResult.read("%s/Ecm_TP%d.npz" % (datadir, d2))
    Ecm.print_data()
    #Ecm.print_details()

    #calcdelta = True
    #if calcdelta:
    #    delta = Ecm.calc_cot_delta(pifit, 1)
    #    delta.save("%s/delta_TP%d.npz" % (datadir, d2))
    #else:
    #    delta = ana.FitResult.read("%s/delta_TP%d.npz" % (datadir, d2))

    calcdE = True
    if calcdE:
        dE = pipifit.calc_dE(pifit, 1, 1, isdependend=False)
        dE.save("%s/dE_TP%d.npz" % (datadir, d2))
    else:
        dE = ana.FitResult.read("%s/dE_TP%d.npz" % (datadir, d2))
    dE.print_data()
    #dE.print_details()
    #plotter = ana.LatticePlot("%s/dE_TP%d_%s.pdf" % (plotdir, d2, lat))
    #label = ["dE", "dE$_{\pi\pi}$", "dE$_{\pi\pi}$"]
    #plotter.histogram(dE, label)
    #del plotter

    #calca = False
    #if calca:
    #    print("calculate scattering length")
    #    #a_pipi = ratiofit.calc_scattering_length(pifit, 1, 1, L=ens.L(), isratio=True)
    #    a_pipi = pipifit.calc_scattering_length(pifit, 1, 1, L=ens.L(), isdependend=False)
    #    #cotd = ratiofit.calc_cot_delta(pifit, 1, 1, L=ens.L(), isratio=True)
    #    a_pipi.save("%s/scat_len_TP%d.npz" % (datadir, d2))
    #else:
    #    a_pipi = ana.FitResult.read("%s/scat_len_TP%d.npz" % (datadir, d2))
    #a_pipi.print_data()
    #plotter = ana.LatticePlot("%s/scat_len_TP%d.pdf" % (plotdir, d2))
    #label = ["scattering length", "a$_{\pi\pi}$", "a$_{\pi\pi}$"]
    #plotter.histogram(a_pipi, label)
    #del plotter

    ## multiply a*m_pi
    #am_pi = a_pipi.mult_obs(pifit)
    #am_pi.print_data()


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
