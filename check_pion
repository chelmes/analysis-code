#!/hadron/knippsch/Enthought/Canopy_64bit/User/bin/python

# Script to plot the effective mass of 1 correlator
import sys
import numpy as np
import analysis2 as ana

def main():
####################################################
# parse the input file1 and setup parameters
#####################################################
    if len(sys.argv) < 2:
        ens = ana.LatticeEnsemble.parse("kk_I1_TP0_A40.24.ini")
    else:
        ens = ana.LatticeEnsemble.parse(sys.argv[1])

    # read settings
    readsingledata = False
    plotsingle = True
    readtwodata = False
    plottwo = False

    # get data from first input file
    prefix = ens.get_data("path")
    print prefix
    lat = ens.name()
    nboot = ens.get_data("nboot")
    datadir = ens.get_data("datadir")
    plotdir = ens.get_data("plotdir")
    gmax = ens.get_data("gmax")
    d2 = ens.get_data("d2")
    try:
        debug = ens.get_data("debug")
    except KeyError:
        debug = 0
    T = ens.T()
    T2 = ens.T2()
    addT = np.ones((nboot,)) * T
    addT2 = np.ones((nboot,)) * T2

    # get data from second input file


#######################################################################
# Begin calculation
#######################################################################
   
    # single particle correlator
    print("read single particle corrs")
    #files = ["%s/pi_charged_p%d.dat" % (datadir, d) for d in range(1)]
    files = "%s/pi_charged_p0_outlier.dat" % (datadir) 
    #kcorr = ana.Correlators(files, matrix=False)
    kcorr_s = ana.Correlators(files, matrix=False, conf_col=3)
    # plot history before omission
    ts=1
    plotter = ana.LatticePlot("%s/outlier_corr_hist_ts%d.pdf" % (plotdir,ts))
    print("Plotting to file %s/outlier_corr_hist_ts%d.pdf" % (plotdir,ts))
    label=['2pt Configuration History', 'cnfg', r'$C(%d)$' % ts,r'$C_2$']
    plotter.history(kcorr_s,label,ts,boot=False)
    two_pt_cut, left_out_two = kcorr_s.omit_iqr(ts=ts)
    kcorr_s.sym_and_boot(nboot)

    #compute effective masses after ratio has been build
    #kcorr.mass()
    kcorr_s.mass()

    #plot effective masses of kcorr and kkcorr
    if plotsingle:
        print("plotting")
        plotter = ana.LatticePlot("%s/mass_pi_TP%d_%s.pdf" % (plotdir, d2,
          lat),join=True)
        plotter.set_env(ylog=False)
        label = [r'Pion Correlator', "t", "m_eff(t)", r'pion']
        #plotter.plot(kcorr, label )
        plotter.plot(kcorr_s, label )
        plotter.plot_single_line(0, 0.06975,r'$m_{eff}^{unit}$','k')
        plotter.save()
        del plotter

    if plottwo:
        print("plotting")
        plotter = ana.LatticePlot("%s/ratio_kk_TP%d_%s.pdf" % (plotdir, d2, lat))
        plotter.set_env(ylog=False)
        label = ["Ratio", "t", "R(t)", "data"]
        print "plotter set up"
        plotter.plot(ratio, label, add=addT, xshift=0.5, debug=debug)
        print "open new file for effective mass"
        plotter.new_file("%s/mass_kk_TP%d_%s.pdf" % (plotdir, d2, lat))
        plotter.set_env(ylog=False)
        label = ["Mass 4pt-function", "$t$", "$m_{eff,KK}$","data"]
        plotter.plot(kkcorr,label)
        del plotter




if __name__ == '__main__':
    try:
        print("starting")
        main()
    except KeyboardInterrupt:
        pass
