#!/hadron/knippsch/Enthought/Canopy_64bit/User/bin/python
##!/usr/bin/python
################################################################################
#
# Author: Christian Jost (jost@hiskp.uni-bonn.de)
# Date:   Februar 2015
#
# Copyright (C) 2015 Christian Jost
# 
# This program is free software: you can redistribute it and/or modify it under 
# the terms of the GNU General Public License as published by the Free Software 
# Foundation, either version 3 of the License, or (at your option) any later 
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with tmLQCD. If not, see <http://www.gnu.org/licenses/>.
#
################################################################################
#
# Function: This program reimplements the pipi analysis of L. Liu
#
# For informations on input parameters see the description of the function.
#
################################################################################

import os
import numpy as np
import numpy.ma as ma

import analysis as ana

def read_in_data(cut=3., debug=False):
    """reading in the data, specialized for the test data.
    """
    #path = "/hiskp2/jost/code/analysis-code/liuming_code/bootstrap-samples.dat"
    path = "/hiskp2/liuming/code_sharing/analysis/bootstrap-samples.dat"
    # read in the data in the following way:
    # first 3 columns contain pion masses for each lattice
    # next columns energy levels for L=32 (A1, 4MF; E, CMF; T2, CMF)
    # next columns energy levels for L=24 (A1, 4MF; E, CMF; T2, CMF)
    # next columns energy levels for L=20 (A1, 4MF; E, CMF; T2, CMF)
    cols = (1,23,45) + tuple(xrange(0,66,2))
    if debug:
        print(cols)
    raw_data = ana.read_data_ascii(path, cols, noheader=True)
    # split the pion masses from the energy data
    mpi = raw_data[:,:3]
    raw_data = raw_data[:,3:]
    # create info list
    infolist = []
    infolen = 0
    finalindex = []
    if debug:
        print("read data:")
        print(raw_data.shape)
        print(raw_data[-1])
        print("read mpi:")
        print(mpi.shape)
        print(mpi[-1])
    # check whether the data is above some cut and replace by NAN if so
    # iterate over lattice sizes
    for i, L in enumerate((32, 24, 20)):
        # calculate constants for each lattice
        piL=np.pi / float(L)
        Ecut = 2. * np.sqrt(1. + cut) * mpi[0,i]
        # iterate through the irreps
        for r, R in enumerate(["A1", "E", "T2"]):
            # iterate through the momenta
            for d, D in enumerate((np.array([0.,0.,0.]), np.array([0.,0.,1.]),\
                              np.array([1.,1.,0.]), np.array([1.,1.,1.]))):
                # skip higher moments if irrep is not A1
                if (r > 0) and (d > 0):
                    continue
                # calculate index for data accessing
                index = i * 11 + d * 2
                if r == 1:
                    index += 8
                elif r == 2:
                    index += 10
                # check if data is above cut
                mom = 2. * np.sum(np.sin(D * piL)**2)
                # check for T2 irrep since it has only one energy level
                if r == 2:
                    Ecm = np.arccosh(np.cosh(raw_data[0,index]) - mom)
                else:
                    Ecm = np.arccosh(np.cosh(raw_data[0,index:index+2]) - mom)
                above = np.greater_equal(Ecm, Ecut)
                # append data to infolist, if above the cut
                if np.sum(~above) == 1:
                    infolist.append((L, i, R, D, [infolen]))
                    finalindex.extend([index])
                    infolen += 1
                elif np.sum(~above) == 2:
                    infolist.append((L, i, R, D, [infolen, infolen+1]))
                    finalindex.extend([index, index+1])
                    infolen += 2
                else:
                    continue
    if debug:
        for i in range(len(infolist)):
            print(infolist[i])
    # cut out all data above index
    raw_data = raw_data[:, finalindex]
    # calculate the covariance matrix
    cov = np.cov(raw_data.T)
    # explicitly set the elements for different lattice sizes to zero
    n32 = np.sum(len(t[-1]) for t in infolist if t[0] == 32)
    n24 = np.sum(len(t[-1]) for t in infolist if t[0] == 24)
    cov[:n32, n32:] = 0.
    cov[n32:, :n32] = 0.
    cov[n32:(n32+n24), (n32+n24):] = 0.
    cov[(n32+n24):, n32:(n32+n24)] = 0.
    # invert covariance matrix
    #cov = np.linalg.inv(cov)
    cov = np.linalg.cholesky(np.linalg.inv(cov))
    if debug:
        print("cov:")
        print(cov.shape)
        for i in range(cov.shape[0]):
            print(cov[i])
    return raw_data, mpi, cov, infolist

def main():
    debug=False
    # general variables
    cut = 3.
    N = 0
    # starting values for the minimizer
    a0 = -.8
    r0 = 12.
    a2 = -.0075
    r2 = 0.
    h = np.array([0.5, 2., 0.01])
    par = np.array([a0, r0, a2, r2])
    try:
        # read all data
        data, mpi, cov, infolist = read_in_data(cut=cut, debug=debug)
        if debug:
            print(data.shape)
            print(data[0])

        # solve
        #ana.minimizer(data, mpi, cov, infolist, a0, r0, a2, r2, h, N)
        res, chi2 = ana.min3(par, N, data, mpi, cov, infolist, h)
        print("%.10lf %.10lf %.10lf %.10lf\n" % (1./res[0], res[1], 1/res[2], chi2) )

    except KeyboardInterrupt:
        print("\nKeyboard Interrupt, exiting...")

# make this script importable, according to the Google Python Style Guide
if __name__ == '__main__':
    main()
