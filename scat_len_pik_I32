#!/hadron/knippsch/Enthought/Canopy_64bit/User/bin/python

# Calculate delta E and pi-K scattering length for I=3/2

import sys
import numpy as np
import itertools

import analysis2 as ana

def main():
    # parse the input file
    if len(sys.argv) < 2:
        ens = ana.LatticeEnsemble.parse("kk_I1_TP0_A40.24.ini")
    else:
        ens = ana.LatticeEnsemble.parse(sys.argv[1])
    # get data from input file
    prefix = ens.get_data("path")
    print prefix
    lat = ens.name()
    nboot = ens.get_data("nboot")
    datadir = ens.get_data("datadir")
    plotdir = ens.get_data("plotdir")
    gmax = ens.get_data("gmax")
    d2 = ens.get_data("d2")
    try:
        debug = ens.get_data("debug")
    except KeyError:
        debug = 0
    L = ens.L()
    T = ens.T()
    T2 = ens.T2()
    addT = np.ones((nboot,)) * T
    addT2 = np.ones((nboot,)) * T2
#--------------- Define filenames
    fit_k_out="fit_k_unit"
    fit_pi_out = "fit_pi_unit"
    fit_pik_out = "fit_pik_weight_unit"
# --------------- Load single particle fitresults   
# Kaon fit
    k_fit = ana.FitResult.read("%s/%s_%s.npz" % (datadir,fit_k_out, lat))
    k_fit.print_data(1)
    k_fit.print_details()

# Pion fit
    pi_fit = ana.FitResult.read("%s/%s_%s.npz" % (datadir,fit_pi_out, lat))
    pi_fit.print_data(1)
    pi_fit.print_details()

# --------------- Load total energy fitresult
# Corr WSS fit
    pi_k_fit = ana.FitResult.read("%s/%s_%s.npz" % (datadir,fit_pik_out,lat))
    pi_k_fit.print_data(1)

# --------------- Calculate m_pi + m_K
    sum_m = k_fit.add_mass(pi_fit)
    sum_m.print_data(0)

# --------------- Calculate reduced mass
    calc_mu = True
    if calc_mu:
        mu = pi_fit.reduced_mass(k_fit)
        mu.save("%s/mu_pi_k_TP%d_%s.npz" % (datadir, d2, lat))
    else:
        print("%s/mu_pi_k_TP%d_%s.npz" % (datadir, d2, lat))
        mu = ana.FitResult.read("%s/mu_pi_k_TP%d_%s.npz" % (datadir, d2, lat))
    mu.print_data(0)

# --------------- Calculate delta E
    calc_dE = True
    if calc_dE:
        dE = pi_k_fit.calc_dE(sum_m,parself=1,parmass=1,flv_diff=True)
        dE.save("%s/dE_TP0_%s.npz" % (datadir,lat))
    else: 
        dE = ana.FitResult.read("%s/dE_TP0_%s.npz" % (datadir,lat))
    dE.print_data()
    print(dE.data[0][0])
# --------------- Calculate scattering length
    calca = True
    if calca:
        print("calculate scattering length")
        a_32 = dE.calc_scattering_length(mu,parself=0,isratio=True,
                                    isdependend=True,L=L)
        a_32.save("%s/scat_len_TP%d_%s.npz" % (datadir, d2, lat))
    else:
        print("%s/scat_len_TP%d_%s.npz" % (datadir, d2, lat))
        a_32 = ana.FitResult.read("%s/scat_len_TP%d_%s.npz" % (datadir, d2, lat))
    a_32.print_data()
    plotter = ana.LatticePlot("%s/scat_len_TP%d_%s.pdf" % (plotdir, d2, lat))
    label = ["scattering length", "a$_{\pi K}$", "a$_{\pi K}$"]
    plotter.histogram(a_32, label)
    plotter.new_file("%s/qq_a0_%s.pdf" % (plotdir, lat))
    label = [r'QQ-Plot $a_0$ %s' % lat, r'weighted $a_0$']
    plotter.qq_plot(a_32,label,par=0)
    del plotter

# --------------- Dimensionless product mu a_3/2
    mult_mu_a0 = True
    if mult_mu_a0:
        mult_obs = a_32.mult_obs(mu, "mu_a32", isdependend = True)
        mult_obs.save("%s/mu_a0_TP%d_%s.npz" % (datadir, d2, lat))
    else:
        mult_obs = ana.FitResult.read("%s/mu_a0_TP%d_%s.npz" % (datadir, d2, lat))
    mult_obs.print_data()
    plotter = ana.LatticePlot("%s/mu_a0_TP%d_%s.pdf" % (plotdir, d2, lat))
    label = ["mu a0", "$\mu$ a$_{\pi K}$", "$\mu$ a$_{\pi K}$"]
    plotter.histogram(a_32, label)
    plotter.new_file("%s/qq_mu_a0_%s.pdf" % (plotdir, lat))
    label = [r'QQ-Plot $a_0$ %s' % lat, r'$\mu$ $a_0$']
    plotter.qq_plot(mult_obs,label,par=0)
    del plotter

if __name__ == '__main__':
    try:
        print("starting")
        main()
    except KeyboardInterrupt:
        pass
