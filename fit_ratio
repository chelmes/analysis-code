#!/usr/bin/python2
##!/hadron/knippsch/Enthought/Canopy_64bit/User/bin/python
##!/usr/bin/python2

import sys
import numpy as np

import analysis2 as ana

def main():
    # parse the input file
    if len(sys.argv) < 2:
        ens = ana.LatticeEnsemble.parse("A40.24.ini")
    else:
        ens = ana.LatticeEnsemble.parse(sys.argv[1])

    # read settings
    readratio = False

    # get data from input file
    prefix = ens.get_data("path")
    lat = ens.name()
    nboot = int(ens.get_data("nboot"))
    datadir = ens.get_data("datadir")
    gmax = int(ens.get_data("gmax"))
    plotdir = ens.get_data("plotdir")
    d2 = ens.get_data("d2")
    T = ens.T()
    files = ["%s/pipi_pipi_A1_corr_TP0_%d%d.dat" % (prefix, i, j) for i in range(gmax) for j in range(gmax)]
    addT = np.ones((nboot,)) * T

    # read pion data
    pi = ana.Correlators.read("%s/corr_pi_%s.npy" % (datadir, lat))
    pifit = ana.FitResult.read("%s/fit_pi_%s.npz" % (datadir, lat))

    # prepare the fitting of data
    # 0 is single partivle correlation function
    # 1 is ratio fit
    # 2 is constant fit
    print("prepare fit")
    fitter = ana.LatticeFit(1, True)
    start = [1., 0.3]

    print("prepare ratio")
    if readratio == False:
        corr = ana.Correlators(files)
        corr.sym_and_boot(nboot)
        corr.shift(1)
        corr.gevp(1)
        corr.save("%s/corr_pipi_TP%d_%s.npy" % (datadir, d2, lat))
        ratio = corr.ratio(pi, 1)
        ratio.save("%s/ratio_pipi_TP%d_%s.npy" % (datadir, d2, lat))
    else:
        corr = ana.Correlators.read("%s/corr_pipi_TP%d_%s.npy" % (datadir, d2, lat))
        ratio = ana.Correlators.read("%s/ratio_pipi_TP%d_%s.npy" % (datadir, d2, lat))

    print("fitting")
    fitres = fitter.fit(start, ratio, [10, 16], corrid="dE", add=addT, oldfit=pifit)

    print("save")
    # save the fit result
    fitres.save("%s/fit_pipi_TP%d_%s.npz" % (datadir, d2, lat))
    #fitres = ana.FitResult.read("%s/fit_pipi_TP%d_%s.npz" % (datadir, d2, lat))
    #fitres.print_data(0)
    fitres.print_data(1)

    # plot the result
    plotter = ana.LatticePlot("test_ratio.pdf")
    label = ["ratio", "x-axis", "y-axis", "ratio"]
    plotter.plot(ratio, label, fitres, fitter, oldfit=pifit, add=addT)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
