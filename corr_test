#!/hadron/knippsch/Enthought/Canopy_64bit/User/bin/python

import sys
import numpy as np

import analysis2 as ana

def main():
    # parse the input file
    if len(sys.argv) < 2:
        ens = ana.LatticeEnsemble.parse("kk_I1_TP0_A40.24.ini")
    else:
        ens = ana.LatticeEnsemble.parse(sys.argv[1])

    # read settings
    readsingledata = False
    readsinglefit = False
    plotsingle = True
    readtwodata = False
    readtwofit = False
    plottwo = True

    # get data from input file
    prefix = ens.get_data("path")
    print prefix
    lat = ens.name()
    nboot = ens.get_data("nboot")
    datadir = ens.get_data("datadir")
    plotdir = ens.get_data("plotdir")
    gmax = ens.get_data("gmax")
    d2 = ens.get_data("d2")
    try:
        debug = ens.get_data("debug")
    except KeyError:
        debug = 0
    T = ens.T()
    T2 = ens.T2()
    addT = np.ones((nboot,)) * T
    addT2 = np.ones((nboot,)) * T2

    # single particle correlator
    print("read single particle corrs")
    files = ["%s/k_charged_p%d.dat" % (datadir, d) for d in range(1)]
    if readsingledata == False:
        picorr = ana.Correlators(files, matrix=False)
        picorr.sym_and_boot(nboot)
        picorr.save("%s/corr_k_%s.npy" % (datadir, lat))
    else:
        picorr = ana.Correlators.read("%s/corr_k_%s.npy" % (datadir, lat))

    #fit_single = ana.LatticeFit(0, True)
    #start_single = [1., 0.3]
    #if readsinglefit == False:
    #    print("fitting")
    #    pifit = fit_single.fit(start_single, picorr, [15,32], corrid="ek",
    #        add=addT, min_size=18, step=1, debug=debug)
    #    pifit.save("%s/fit_k_%s.npz" % (datadir, lat))
    #else:
    #    pifit = ana.FitResult.read("%s/fit_k_%s.npz" % (datadir, lat))
    #pifit.print_data(1)
    #range_mk, r_mk_shape = pifit.get_ranges()
    #print(range_mk)

    ## plot the result
    #if plotsingle:
    #    print("plotting")
    #    plotter = ana.LatticePlot("%s/fit_k_%s.pdf" % (plotdir, lat))
    #    plotter.set_env(ylog=True)
    #    label = ["single particle", "t", "C(t)", "kaon"]
    #    plotter.plot(picorr, label, pifit, fit_single, add=addT, debug=debug)
    #    plotter.new_file("%s/hist_fit_k_%s.pdf" % (plotdir, lat))
    #    label = ["kaon energy", "E$_\k$/a", "E$_\k$"]
    #    plotter.histogram(pifit, label, 1)
    #    del plotter

    # two particle correlator
    print("read two particle corrs")
    files = ["%s/kk_charged_A1_TP%d_%d%d.dat" % (datadir, d2, i, j) for i in\
        range(gmax+1) for j in range(gmax+1)]
    print files
    if readtwodata == False:
        kkcorr = ana.Correlators(files, matrix=False)

        kkhist = kkcorr.hist(3)
        plotter = ana.LatticePlot("%s/hist_ts_kk.pdf" % plotdir)
        label = ["4pt history","cfg","C(3)", "data"]
        plotter.set_title(label[0],label[1:3])
        plotter.set_env()
        plotter.plot_data(np.arange(277),kkhist,np.zeros_like(kkhist),label[-1])
        plotter.save()

        del plotter
        kkcorr.sym_and_boot(nboot)
        if d2 != 0:
            dE = pifit.error[1][0][1] - pifit.error[1][0][0]
            #print(dE)
            kkcorr.shift(1, dE=dE)
        else:
            #kkcorr.shift(1)
            pass
        ratio = kkcorr.ratio(picorr, ratio=2 )
        kkcorr.save("%s/corr_kk_TP%d_%s.npy" % (datadir, d2, lat))
    else:
        kkcorr = ana.Correlators.read("%s/corr_kk_TP%d_%s.npy" % (datadir, d2, lat))

    if plottwo:
        print("plotting")
        plotter = ana.LatticePlot("%s/fit_ratio_kk_TP%d_%s.pdf" % (plotdir, d2, lat))
        #plotter = ana.LatticePlot("%s/fit_kk_ratio_TP%d_%s.pdf" % (plotdir, d2, lat))
        plotter.set_env(ylog=False)
        label = ["Ratio", "t", "R(t)", "data"]
        #plotter.plot(kkcorr, label)
        print "plotter set up"
        #plotter.plot(ratio, label, ratiofit, fit_ratio, oldfit=pifit, add=addT, oldfitpar=1, debug=debug)
        print "open new file for deltaE"
        plotter.new_file("%s/hist_fit_kk_TP%d_%s.pdf" % (plotdir, d2, lat))
        #plotter.new_file("%s/hist_fit_kk_ratio_TP%d_%s.pdf" % (plotdir, d2, lat))
        label = ["ratio", "dE$_{KK}$/a", "dE$_{KK}$"]
        plotter.histogram(ratiofit, label, 1)
        del plotter

if __name__ == '__main__':
    try:
        print("starting")
        main()
    except KeyboardInterrupt:
        pass
