#!/hadron/knippsch/Enthought/Canopy_64bit/User/bin/python

import numpy as np
import matplotlib
matplotlib.use('Agg') # has to be imported before the next lines
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages

import analysis as ana

def pipi_fit(p, t):
    return (1. - p[0])*np.exp(-p[1]*(t-1)) + p[0]*np.exp(-p[2]*(t-1))

def plot_data_2(X, Y1, dY1, Y2, dY2, pdfplot, label, plotrange=None, logscale=False, xlim=None, ylim=None):
    """A function that plots a correlation function.

    This function plots the given data points and the fit to the data. The plot
    is saved to pdfplot. It is assumed that pdfplot is a pdf backend to
    matplotlib so that multiple plots can be saved to the object.

    Args:
        X: The data for the x axis.
        Y: The data for the y axis.
        dY: The error on the y axis data.
        pdfplot: A PdfPages object in which to save the plot.
        label: label for the plot
        plotrange: A list with two entries, the lower and upper range of the
                   plot.
        logscale: Make the y-scale a logscale.
        xlim: tuple of the limits on the x axis
        ylim: tuple of the limits on the y axis

    Returns:
        Nothing.
    """
    # check boundaries for the plot
    if isinstance(plotrange, (np.ndarray, list, tuple)):
        plotrange = np.asarray(plotrange).flatten()
        if plotrange.size < 2:
            raise IndexError("plotrange is too small")
        else:
            l = int(plotrange[0])
            u = int(plotrange[1])
        # plot the data
        p1 = plt.errorbar(X[l:u], Y1[0,l:u], dY1[l:u], fmt='x' + 'b', label=label[3])
        p2 = plt.errorbar(X[l:u], Y2[0,l:u], dY2[l:u], fmt='x' + 'r', label=label[4])
    else:
        # plot the data
        p1 = plt.errorbar(X, Y1[0], dY1, fmt='x' + 'b', label=label[3])
        p2 = plt.errorbar(X, Y2[0], dY2, fmt='x' + 'r', label=label[4])

    # adjusting the plot style
    plt.grid(True)
    plt.xlabel(label[1])
    plt.ylabel(label[2])
    plt.title(label[0])
    plt.legend()
    if logscale:
        plt.yscale('log')
    if xlim:
        plt.xlim(xlim)
    if ylim:
        plt.ylim(ylim)

    # save pdf and clear plot
    pdfplot.savefig()
    plt.clf()

    return

def main():
    #lat="A40.24"
    #lat="B55.32"
    lat="D15.48"
    i=0
    datafolder="./raw_data/"
    plotfolder="./plots/"

    # read data
    pi_data = ana.read_data("raw_data/pi_data_%s_TP0.npy" % lat)
    pipi_data = ana.read_data("raw_data/pipi_data_%s_TP0.npy" % lat)
    gevp0 = ana.read_data("raw_data/pipi_corr_mat_%s_TP0_s0.npy" % lat)
    gevp1 = ana.read_data("raw_data/pipi_corr_mat_%s_TP0_s1.npy" % lat)

    ## read pion data
    fname = "%s/fit_results_%s_TP%d.npz" % (datafolder, lat, 0)
    pionranges, pi, pichi2, pipvals = ana.read_fitresults(fname)
    # calculate statistic and systematic error of the pion
    plotname="".join(("pion_", lat))
    mpi, dmpi_stat, dmpi_syst, weights_mpi = ana.sys_error(pi, pipvals, 
        np.array([0., 0., 0.]), plotname, path=plotfolder)

    # generate list with time
    T2 = pi_data.shape[1]
    tlist = np.linspace(0., float(T2), T2, endpoint=False)

    # open plot files
    myplt = PdfPages("./test_plot_%s.pdf" % lat)

    # plot original data
    mpipi_data, dpipi_data = ana.calc_error(pipi_data)
    label = ["$\pi\pi$ correlation function", "t", "C(t)", "data"]
    ana.plot_data(tlist, pipi_data[:,:,i,i], dpipi_data[:,i,i], myplt, label,
        logscale=True)
    pipi_mass, mpipi_mass, dpipi_mass = ana.compute_mass(pipi_data[:,:,i,i])
    label = ["$\pi\pi$ effective mass", "t", "$m_\mathrm{eff}$(t)", "data"]
    ana.plot_data(tlist[:-2], pipi_mass, dpipi_mass, myplt, label)

    # plot GEVP data
    mgevp0, dgevp0 = ana.calc_error(gevp0)
    label = ["$\pi\pi$ correlation function after GEVP", "t", "C(t)", "data"]
    ana.plot_data(tlist, gevp0[:,:,i], dgevp0[:,i], myplt, label, logscale=True)
    mass0, mmass0, dmass0 = ana.compute_mass(gevp0[:,:,i])
    label = ["$\pi\pi$ effective mass after GEVP", "t", "$m_\mathrm{eff}$(t)", "data"]
    ana.plot_data(tlist[:-2], mass0, dmass0, myplt, label)

    # plot difference between original and GEVP data
    tmp = np.abs((pipi_mass - mass0) / pipi_mass)
    label = ["relative difference between original and GEVP", "t", "$m_\mathrm{eff}$(t)", "data"]
    ana.plot_data(tlist[:-2], tmp, np.zeros(tmp.shape[1:]), myplt, label)

    # plot data with timeshift before GEVP
    mgevp1, dgevp1 = ana.calc_error(gevp1)
    label = ["shifted $\pi\pi$ correlation function after GEVP", "t", "C(t)", "data"]
    ana.plot_data(tlist[:-1], gevp1[:,:,i], dgevp1[:,i], myplt, label, logscale=True)
    mass1, mmass1, dmass1 = ana.compute_mass(gevp1[:,:,i])
    label = ["shifted $\pi\pi$ effective mass after GEVP", "t", "$m_\mathrm{eff}$(t)", "data"]
    ana.plot_data(tlist[:-3], mass1, dmass1, myplt, label)

    # plot data with timeshift after GEVP
    gevp0s = ana.shift_corr_matrix(gevp0, 1)
    mgevp0s, dgevp0s = ana.calc_error(gevp0s)
    label = ["$\pi\pi$ correlation function after GEVP and shift", "t", "C(t)", "data"]
    ana.plot_data(tlist[:-1], gevp0s[:,:,i], dgevp0s[:,i], myplt, label, logscale=True)
    mass0s, mmass0s, dmass0s = ana.compute_mass(gevp0s[:,:,i])
    label = ["shifted $\pi\pi$ effective mass after GEVP", "t", "$m_\mathrm{eff}$(t)", "data"]
    ana.plot_data(tlist[:-3], mass1, dmass1, myplt, label)

    # plot difference between shift before and after
    tmp = np.abs((mass0s - mass1) / mass0s)
    label = ["relative difference between shift before and after GEVP", "t",
        "$m_\mathrm{eff}$(t)", "data"]
    ana.plot_data(tlist[:-3], tmp, np.zeros(tmp.shape[1:]), myplt, label)

    # plot difference between original and shifted data
    label = ["original and shifted data", "t", "C(t)", "original", "shifted"]
    plot_data_2(tlist[:-1], gevp0[:,:-1,i], dgevp0[:-1,i], gevp1[:,:,i],
        dgevp1[:,i], myplt, label, logscale=True)

    # plot difference between original and shifted effective mass
    label = ["original and shifted data", "t", "$m_\mathrm{eff}$(t)", "original",
        "shifted"]
    plot_data_2(tlist[:-3], mass0[:,:-1], dmass0[:-1], mass1, dmass1, myplt, label)

    # check for the thermal states by plotting exp(E_pipi)C(t)
    tmp0 = np.zeros_like(gevp0[:,:,i])
    tmp1 = np.zeros_like(gevp1[:,:,i])
    for t in range(gevp0.shape[1]):
        tmp0[:,t] = np.exp(2.*mpi[0]*tlist[t]) * gevp0[:,t,i]
    for t in range(gevp1.shape[1]):
        tmp1[:,t] = np.exp(2.*mpi[0]*tlist[t]) * gevp1[:,t,i]
    label = ["thermal state check", "t", "$e^{2 m_\pi t}$C(t)", "original", "shifted"]
    plot_data_2(tlist[:-1], tmp0[:,:-1], np.zeros(tmp0[:,:-1].shape[1:]),
        tmp1, np.zeros(tmp1.shape[1:]), myplt, label)

    # plot the different principal correlators
    for j in range(gevp1.shape[-1]):
        label = ["principal corr. %d" % j, "t", "C(t)", "data", "fit"]
        res, chi2, pv = ana.fitting(pipi_fit, tlist[3:-3], gevp1[:,3:-2,j],
            [0.8, 2*mpi[0], 1.], correlated=False, verbose=False)
        mres, dres = ana.calc_error(res)
        print(mres)
        ana.plot_data_with_fit(tlist[:-1], gevp1[0,:,j], dgevp1[:,j], pipi_fit,
            mres, [1,T2-2], label, myplt, logscale=True)
        label[2] = "$e^{E(t-1)}C(t)"
        tmp1 = np.zeros_like(gevp1[:,:,j])
        for t in range(gevp1.shape[1]):
            tmp1[:,t] = np.exp(mres[1]*(tlist[t]-1)) * gevp1[:,t,j] + mres[0]
        ana.plot_data(tlist[:-1], tmp1, dgevp1[:,j], myplt, label, plotrange=[1,T2-2],
            ylim=[0., 2.])

    # plot ratio
    ratio1, mratio1, dratio1 = ana.ratio_shift(gevp1, pi_data, pi_data)
    ratio2, mratio2, dratio2 = ana.simple_ratio_subtract(gevp1, pi_data, pi_data)
    for j in range(gevp1.shape[-1]):
        label = ["ratio of pric. corr. %d after GEVP " % j, "t", "R(t)", "simple", "subtracted"]
        plot_data_2(tlist[:-2], ratio1[:,:-1,j], dratio1[:-1,j], ratio2[:,:,j],
            dratio2[:,j], myplt, label, plotrange=[5, T2+1])

    # plot ratio on original data
    ratio1, mratio1, dratio1 = ana.simple_ratio(pipi_data, pi_data, pi_data)
    ratio2, mratio2, dratio2 = ana.simple_ratio_subtract(pipi_data, pi_data, pi_data)
    for j in range(pipi_data.shape[-1]):
        label = ["ratio of corr. fct. %d" % j, "t", "R(t)", "simple", "subtracted"]
        plot_data_2(tlist[:-1], ratio1[:,:-1,j,j], dratio1[:-1,j,j], ratio2[:,:,j,j],
            dratio2[:,j,j], myplt, label, plotrange=[5, T2])


    # close plot files
    myplt.close()
    return

# make this script importable, according to the Google Python Style Guide
if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
