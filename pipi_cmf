#!/usr/bin/python
################################################################################
#
# Author: Christopher Helmes (helmes@hiskp.uni-bonn.de)
# Date:   Februar 2015
#
# Copyright (C) 2015 Christopher Helmes
# 
# This program is free software: you can redistribute it and/or modify it under 
# the terms of the GNU General Public License as published by the Free Software 
# Foundation, either version 3 of the License, or (at your option) any later 
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with tmLQCD. If not, see <http://www.gnu.org/licenses/>.
#
################################################################################
#
# Function: Pi-Pi-scattering analysis in the center of mass frame 
#
# For informations on input parameters see the description of the function.
#
################################################################################

# system imports
import numpy as np
import matplotlib
matplotlib.use('QT4Agg') # has to be imported before the next lines
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages

# Christian's packages
import input_output as io
import bootstrap
import corr_matrix as cm
import gevp
import fit
import plot
import analyze_fcts as af

def print_results(data, error):
    print("E dE  delta ddelta  tan dtan  sin2 dsin2")
    for _i in range(data.shape[0]):
        print("%.7lf %.7lf  %.7lf %.7lf  %.7lf %.7lf  %.7lf %.7lf" % (
              data[_i,0], error[_i,0], data[_i,1], error[_i,1],
              data[_i,2], error[_i,2], data[_i,3], error[_i,3]))

def main():
    # number of bootstrap samples
    nbsamples = 500
    # temporal lattice extent
    tmin = 1
    T = 96
    L = 48
    lattice = "B35.48"
    d = np.array([0.,0.,0.])
    d2 = np.dot(d,d)
    # get mpi from single_corr_analysis
    mpi = 0.12356
    path = "/home/christopher/studium/PROMO/data/correlators/scattering/I2_pipi/B35.48/pipi_pipi_A1_corr_TP0"
    tmp_out = "/home/christopher/studium/PROMO/data/correlators/scattering/I2_pipi/B35.48/scratch/"
 
    # start with usual analysis (thermal states contamination expected)
    fitfunc = lambda p,t: p[0]*p[0]*(np.exp(-p[1]*t) + np.exp(-p[1]*(T-t)))
    start_params = [1, 0.5]
    massfunc = lambda p, t: p
    # define fit ranges
    lolist = np.array((12,10,9))
    uplist = np.array((30,32,34))
    entries = ["_00", "_01", "_02", "_10", "_11", "_12", "_20", "_21", "_22"]
    print("create correlation matrix")
    corr_mat, T2 = cm.create_corr_matrix(nbsamples, path, entries, verbose=1 )
    corr_save = "".join((tmp_out, "corr_tmp.dat"))
     #cm.write_corr_matrix(corr_mat,corr_save) 
    gevp_mat = gevp.calculate_gevp(corr_mat)
    print(gevp_mat.shape[0])
    # prepare storage for results
    odata = np.zeros((gevp_mat.shape[2], 4))
    mdata = np.zeros_like(odata)
    ddata = np.zeros_like(odata)

    # set fit data
    tlist = np.linspace(0., float(T2), float(T2), endpoint=False)
    # outputfile for the plot
    print(d2)
    pfit = PdfPages("./plots/fit_gevp_%s_TP%d.pdf" % (lattice,d2))
    for _l in range(gevp_mat.shape[2]):
        lo = lolist[_l]
        up = uplist[_l]
        print("\nprincipal correlator %d" % _l)
        #print(gevp_mat[0,:,_l])
        # fit the energy and print information
        print("fitting correlation function")
        res, chi2, pval=fit.fitting(fitfunc, tlist[lo:up], gevp_mat[:,lo:up,_l],
                                      start_params, verbose=0)
        print("p-value %.7lf" % (pval))

        # check whether energy satiesfies 2mpi <= res < 4mpi
        #for _b in range(res.shape[0]):
        #    if not (2*mpi <= res[_b,1] < 4*mpi) and (_l == 0):
        #        print("problem on sample %d" % _b)

        # set up the plot
        mgevp, dgevp = af.return_mean_corr(gevp_mat[:,:,_l])
        mres, dres = af.return_mean_corr(res)
        fitlabel = "fit %d:%d" % (lo, up-1)
        label = ["time", "C(t)", "data", fitlabel]

        # plot the data and the fit
        print("plotting")
        plot.corr_fct_with_fit(tlist, gevp_mat[0,:,_l], dgevp, fitfunc, mres,
                               [tmin,T2], label, pfit, True)
        
        # calculate Ecm, q and delta
        print("calculating")
        gamma, Ecm = af.calculate_cm_energy(res[:,1], L, d)
        q2 = af.calculate_q(Ecm, mpi, L)
        print(q2)
        delta, tandelta = af.calculate_delta(q2, gamma, d)

        # save data
        print("saving")
        mdata[_l,0], ddata[_l,0] = af.return_mean_corr(Ecm)
        mdata[_l,1], ddata[_l,1] = af.return_mean_corr(delta)
        mdata[_l,2], ddata[_l,2] = af.return_mean_corr(tandelta)
        mdata[_l,3] = np.sin(mdata[_l,1])**2
        ddata[_l,3] = np.abs(np.sin(mdata[_l,1]*2.)*ddata[_l,1])
        odata[_l,0] = Ecm[0]
        odata[_l,1] = delta[0]
        odata[_l,2] = tandelta[0]
        odata[_l,3] = np.sin(delta[0])**2
        
        # calculate mass and plot
        # not used to extract an energy
        print("fitting mass")
        mass, mmass, dmass = af.compute_mass(gevp_mat[:,:,_l])
        mmassres = mres[1]
        print("plotting")
        label[1] = "m_eff(t)"
        plot.corr_fct_with_fit(tlist[1:-1], mass[0], dmass, massfunc, mmassres,
                               [tmin-1,T2-1], label, pfit, False)
    # print data
    print_results(odata, ddata)
    print_results(mdata, ddata)
    pfit.close()

# make this script importable, according to the Google Python Style Guide
if __name__ == '__main__':
    main()
