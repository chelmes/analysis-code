#!/hiskp2/jost/code/Enthought/System/bin/python

import sys
import numpy as np

import analysis2 as ana

def main():
    # parse the input file
    if len(sys.argv) < 2:
        ens = ana.LatticeEnsemble.parse("A40.24.ini")
    else:
        ens = ana.LatticeEnsemble.parse(sys.argv[1])

    # read settings
    readdata = False
    readfit = False
    plotdata = True

    # get data from input file
    prefix = ens.get_data("path")
    lat = ens.name()
    nboot = ens.get_data("nboot")
    datadir = "/".join((ens.get_data("datadir"), lat))
    plotdir = "/".join((ens.get_data("plotdir"), lat))
    T = ens.T()
    T2 = ens.T2()
    pmax = ens.get_data("pmax")
    Ti = ens.get_data("ti")
    Tf = ens.get_data("tf")
    dti = ens.get_data("dti")
    dtf = ens.get_data("dtf")
    dt = ens.get_data("dt")
    try:
        irrep = ens.get_data("irrep")
    except:
        irrep = "A1g"
    try:
        debug = ens.get_data("debug")
    except KeyError:
        debug = 0
    try:
        hasvev = ens.get_data("hasvev")
    except KeyError:
        hasvev = False
    #debug = 5

    files = ["%s/C2_p%d_%s_avg.h5" % (prefix, d, irrep) for d in range(pmax)]
    addT = np.ones((nboot,)) * T

    xshift = 0.
    if hasvev:
        xshift = 0.5

    if readdata == False:
        print("read new data")
        corr = ana.Correlators.read_hdf5(files)
        corr.sym_and_boot(nboot)
        if hasvev:
            corr.shift(dt=1)
        corr.save("%s/corr_pi.npz" % (datadir))
    else:
        print("read bootstrapped data")
        corr = ana.Correlators.read("%s/corr_pi.npz" % (datadir))

    #if debug > -1:
    #    print(corr.shape)
    #    #for t, d in enumerate(corr.data[0]):
    #    #  print("%d: %.3e" % (t, d))

    print("fitting")
    if hasvev:
        fitter = ana.LatticeFit(5, dt_i=dti, dt_f=dtf, dt=dt, correlated=True,
            xshift=0., debug=debug)
    else:
        fitter = ana.LatticeFit(0, dt_i=dti, dt_f=dtf, dt=dt, correlated=False,
            xshift=xshift, debug=debug)
    if readfit == False:
        if debug:
            print("fitting the data")
        #st = [100., 0.15769]
        st = None
        franges = [Ti, Tf]
        fitres = fitter.fit(st, corr, franges, corrid="epi", add=addT, lint=False)
        fitres.save("%s/fit_pi.npz" % (datadir))
    else:
        if debug:
            print("fitting the data")
        fitres = ana.FitResult.read("%s/fit_pi.npz" % (datadir))
    #print(corr.data[0][:,0])
    #fitres.print_data(0)
    fitres.print_data(1)
    #fitres.print_details()

    # plot the result
    if plotdata:
        plotter = ana.LatticePlot("%s/fit_pi.pdf" % (plotdir))
        plotter.set_env(ylog=True)
        label = ["single pion energy", "t", "C(t)", "E$_{\pi}$"]
        plotter.plot(corr, label, fitres, fitter, add=addT, xshift=xshift, ploterror=True)
        #plotter.new_file("%s/hist_fit_pi.pdf" % (plotdir))
        #plotter = ana.LatticePlot("%s/hist_fit_pi.pdf" % (plotdir))
        #label = ["single pion energy", "E$_\pi$/a", "E$_\pi$"]
        #plotter.histogram(fitres, label, par=1)
        plotter.new_file("%s/eff_mass_pi.pdf" % (plotdir))
        plotter.set_env(ylog=False)
        #plotter = ana.LatticePlot("%s/eff_mass_pi.pdf" % (plotdir))
        corr.mass()
        label = ["single pion effective mass", "t", "m$_\pi$", ""]
        plotter.plot(corr, label)
        # re-read the original data, needed for the history plots
        del plotter

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
