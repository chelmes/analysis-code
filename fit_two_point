#!/hadron/knippsch/Enthought/Canopy_64bit/User/bin/python
##!/usr/bin/python2

import sys
import numpy as np

import analysis2 as ana

def main():
    # parse the input file
    if len(sys.argv) < 2:
        ens = ana.LatticeEnsemble.parse("A40.24.ini")
    else:
        ens = ana.LatticeEnsemble.parse(sys.argv[1])

    # read settings
    readdata = True
    readfit = False
    plotdata = True

    # get data from input file
    prefix = ens.get_data("path")
    lat = ens.name()
    nboot = ens.get_data("nboot")
    datadir = "/".join((ens.get_data("datadir"), lat))
    plotdir = "/".join((ens.get_data("plotdir"), lat))
    T = ens.T()
    T2 = ens.T2()
    pmax = ens.get_data("pmax")
    Ti = ens.get_data("ti")
    Tf = ens.get_data("tf")
    dti = ens.get_data("dti")
    dtf = ens.get_data("dtf")
    dt = ens.get_data("dt")

    files = ["%s/pi_corr_p%d.dat" % (prefix, d) for d in range(pmax)]
    addT = np.ones((nboot,)) * T

    print("read data")
    if readdata == False:
        corr = ana.Correlators(files, matrix=False)
        corr.sym_and_boot(nboot)
        corr.save("%s/corr_pi.npy" % (datadir))
    else:
        corr = ana.Correlators.read("%s/corr_pi.npy" % (datadir))

    print("fitting")
    fitter = ana.LatticeFit(0, True)
    if readfit == False:
        fitres = fitter.fit(None, corr, [Ti, Tf], corrid="epi", add=addT,
              dt_i=dti, dt_f=dtf, dt=dt)
        fitres.save("%s/fit_pi.npz" % (datadir))
    else:
        fitres = ana.FitResult.read("%s/fit_pi.npz" % (datadir))
    #fitres.print_data(0)
    fitres.print_data(1)
    fitres.print_details()

    # plot the result
    if plotdata:
        plotter = ana.LatticePlot("%s/fit_pi.pdf" % (plotdir))
        plotter.set_env(ylog=True)
        label = ["single pion energy", "t", "C(t)", "E$_{\pi}$"]
        plotter.plot(corr, label, fitres, fitter, add=addT)
        plotter.new_file("%s/hist_fit_pi.pdf" % (plotdir))
        label = ["single pion energy", "E$_\pi$/a", "E$_\pi$"]
        plotter.histogram(fitres, label, 1)
        del plotter

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
