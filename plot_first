#!/hadron/knippsch/Enthought/Canopy_64bit/User/bin/python

# Script to plot the effective masses and the ratio

import sys
import numpy as np
import analysis2 as ana

def main():
####################################################
# parse the input file and setup parameters
#####################################################
    if len(sys.argv) < 2:
        ens = ana.LatticeEnsemble.parse("kk_I1_TP0_A40.24.ini")
    else:
        ens = ana.LatticeEnsemble.parse(sys.argv[1])

    # read settings
    readsingledata = False
    plotsingle = True
    readtwodata = False
    plottwo = False
    compare = True
    # get data from input file
    lat = ens.name()
    nboot = ens.get_data("nboot")
    datadir = ens.get_data("datadir")
    plotdir = ens.get_data("plotdir")
    gmax = ens.get_data("gmax")
    d2 = ens.get_data("d2")
    try:
        debug = ens.get_data("debug")
    except KeyError:
        debug = 0
    T = ens.T()
    T2 = ens.T2()
    addT = np.ones((nboot,)) * T
    addT2 = np.ones((nboot,)) * T2


#######################################################################
# Begin calculation
#######################################################################
   
    # single particle correlator
    print("read single particle corrs")
    files = ["%s/pi_charged.dat" % (datadir)]
    #files = ["%s/k_charged_p%d.dat" % (datadir, d) for d in range(1)]
    if readsingledata == False:
        tp_corr = ana.Correlators(files, matrix=False, conf_col=3)
        print(tp_corr.data[0].shape)
        #tp_corr.bootstrap(nboot)
        print(tp_corr.shape)
        tp_corr.save("%s/corr_pi_%s.npy" % (datadir, lat))
    else:
        tp_corr = ana.Correlators.read("%s/corr_pi%s.npy" % (datadir, lat))

    ## two particle correlator
    #print("read two particle corrs")
    ##files = ["%s/kk_charged_A1_TP%d_%d%d.dat" % (datadir, d2, i, j) for i in\
    ##    range(gmax+1) for j in range(gmax+1)]
    #files = ["%s/kk_charged_A1_TP%d_%d%d.dat" % (datadir, d2, i, j) for i in\
    #    range(gmax+1) for j in range(gmax+1)]
    #print files
    #if readtwodata == False:
    #    kkcorr = ana.Correlators(files, matrix=False, conf_col=3)
    #    kkshifted = kkcorr.back_derivative()
    #    kkshifted.bootstrap(nboot)
    #    kkshifted.reflect(kind="point")
    #    kkcorr.sym_and_boot(nboot)
    #    #kkcorr.bootstrap(nboot)
    #    #kkcorr.symmetrize(nboot)
    #    ratio = kkcorr.ratio(kcorr, ratio=2 )
    #    kkcorr.save("%s/corr_kk_TP%d_%s.npy" % (datadir, d2, lat))
    #else:
    #    kkcorr = ana.Correlators.read("%s/corr_kk_TP%d_%s.npy" % (datadir, d2, lat))
    #    ratio = kkcorr.ratio(kcorr, ratio=2 )


    #plot effective masses of kcorr and kkcorr
    if plotsingle:
        print("plotting")
        plotter = ana.LatticePlot("%s/outlier_corr_hist.pdf" % (plotdir))
        print("Plotting to file %s/outlier_corr_hist.pdf" % (plotdir))
        #for ts in range(T):
        #    label=['2pt Configuration History', 'cnfg', r'$C(%d)$' % ts,r'$C_2$']
        #    plotter.history(tp_corr,label,ts,boot=False)
        #del plotter
        tp_corr.sym_and_boot(nboot)
        plotter = ana.LatticePlot("%s/corr_pi_TP%d_%s.pdf" % (plotdir, d2, lat))
        plotter.set_env(ylog=True)
        label = ["C_pi", "t", "C_2(t)", "data"]
        plotter.plot(tp_corr, label )
        plotter.new_file("%s/mass_pi_fsolve_TP%d_%s.pdf" % (plotdir, d2, lat))
        plotter.set_env(ylog=False,ylim=[0.15,0.2])
        label = ["Mass Kaon", "t", "m_eff(t)", "data"]
        tp_corr.mass(exp=True)
        plotter.plot(tp_corr, label, debug=4)
        del plotter

    if plottwo:
        print("plotting")
        plotter = ana.LatticePlot("%s/corr_kk_shifted_TP%d_%s.pdf" % (plotdir, d2, lat))
        plotter.set_env(ylog=True)
        label = [r"C_{KK}(t)-C_{KK}(t+1)", "t", "C_4(t)", "data"]
        print "plotter set up"
        plotter.plot(kkshifted, label, add=addT, debug=debug)
        plotter.new_file("%s/corr_kk_TP%d_%s.pdf" % (plotdir, d2, lat))
        label = [r"C_{KK}(t)", "t", "C_4(t)", "data"]
        plotter.plot(kkcorr, label, add=addT, debug=debug)
        print "open new file for effective mass"
        plotter.new_file("%s/mass_kk_TP%d_%s.pdf" % (plotdir, d2, lat))
        plotter.set_env(ylog=False,ylim=[0.1,0.2])
        label = [r"Effective Mass $C_4$", "$t$", "$m_{eff,KK}$","data"]
        kkcorr.mass()
        plotter.plot(kkcorr,label) 
        plotter.new_file("%s/mass_kk_shift_TP%d_%s.pdf" % (plotdir, d2, lat))
        plotter.set_env(ylog=False)
        label = [r"Effective Mass $C_4(t)-C_4(t+1)$", "$t$", "$m_{eff,KK}$","data"]
        kkshifted.mass(usecosh=False)
        plotter.plot(kkshifted,label) 
        print "open new file for ratio"
        plotter.new_file("%s/ratio_TP%d_%s.pdf" % (plotdir, d2, lat))
        label = [r"Ratio", "t", "R(t)", "data"]
        plotter.plot(ratio,label,add=addT,xshift=0.5,debug=debug)
        del plotter

if __name__ == '__main__':
    try:
        print("starting")
        main()
    except KeyboardInterrupt:
        pass

