#!/usr/bin/python2
##!/hadron/knippsch/Enthought/Canopy_64bit/User/bin/python
##!/usr/bin/python2

import sys
import numpy as np

import analysis2 as ana

def main():
    # parse the input file
    if len(sys.argv) < 2:
        ens = ana.LatticeEnsemble.parse("A40.24.ini")
    else:
        ens = ana.LatticeEnsemble.parse(sys.argv[1])

    # read settings
    readsingledata = True
    readsinglefit = True
    plotsingle = False
    readtwodata = True
    readtwofit = True
    plottwo = False

    # get data from input file
    prefix = ens.get_data("path")
    lat = ens.name()
    nboot = ens.get_data("nboot")
    datadir = ens.get_data("datadir")
    plotdir = ens.get_data("plotdir")
    gmax = ens.get_data("gmax")
    d2 = ens.get_data("d2")
    T = ens.T()
    addT = np.ones((nboot,)) * T

    # single particle correlator
    print("read single particle corrs")
    files = ["%s/pi_corr_p%d.dat" % (prefix, d) for d in range(3)]
    if readsingledata == False:
        picorr = ana.Correlators(files, matrix=False)
        picorr.sym_and_boot(nboot)
        picorr.save("%s/corr_pi_%s.npy" % (datadir, lat))
    else:
        picorr = ana.Correlators.read("%s/corr_pi_%s.npy" % (datadir, lat))
    #picorr.mass()
    print("prepare fit")
    fit_single = ana.LatticeFit(0, True)
    start_single = [1., 0.3]
    if readsinglefit == False:
        print("fitting")
        pifit = fit_single.fit(start_single, picorr, [6,24], corrid="epi", add=addT)
        pifit.save("%s/fit_pi_%s.npz" % (datadir, lat))
    else:
        pifit = ana.FitResult.read("%s/fit_pi_%s.npz" % (datadir, lat))
    pifit.print_data(1)

    # plot the result
    if plotsingle:
        print("plotting")
        plotter = ana.LatticePlot("%s/fit_pi_%s.pdf" % (plotdir, lat))
        plotter.set_env(ylog=True)
        histo = ana.LatticePlot("%s/hist_fit_pi_%s.pdf" % (plotdir, lat))
        label = ["single particle", "t", "C(t)", "pion"]
        plotter.plot(picorr, label, pifit, fit_single, add=addT)
        label = ["pion energy", "E$_\pi$/a", "E$_\pi$"]
        histo.histogram(pifit, label, 1)
        del plotter, histo

    # two particle correlator
    print("read two particle corrs")
    files = ["%s/pipi_pipi_A1_corr_TP%d_%d%d.dat" % (prefix, d2, i, j) for i in\
        range(gmax) for j in range(gmax)]
    if readtwodata == False:
        pipicorr = ana.Correlators(files, matrix=True)
        pipicorr.sym_and_boot(nboot)
        pipicorr.shift(1)
        pipicorr.gevp(1)
        pipicorr.save("%s/corr_pipi_TP%d_%s.npy" % (datadir, d2, lat))
    else:
        pipicorr = ana.Correlators.read("%s/corr_pipi_TP%d_%s.npy" % (datadir, d2, lat))
    print("prepare fit")
    if readtwofit == False:
        print("fitting")
        pipifit = fit_single.fit(start_single, pipicorr, [[6,20], [6,18], [5,15]],
            corrid="epipi", add=addT, debug=0)
        pipifit.save("%s/fit_pipi_TP%d_%s.npz" % (datadir, d2, lat))
    else:
        pipifit = ana.FitResult.read("%s/fit_pipi_TP%d_%s.npz" % (datadir, d2, lat))
    pipifit.print_data(1)

    if plottwo:
        print("plotting")
        plotter = ana.LatticePlot("%s/fit_pipi_TP%d_%s.pdf" % (plotdir, d2, lat))
        plotter.set_env(ylog=True)
        histo = ana.LatticePlot("%s/hist_fit_pipi_TP%d_%s.pdf" % (plotdir, d2, lat))
        label = ["two particle", "t", "C(t)", "pipi"]
        plotter.plot(pipicorr, label, pipifit, fit_single, add=addT)
        label = ["pi-pi energy", "E$_{\pi\pi}$/a", "E$_{\pi\pi}$"]
        histo.histogram(pipifit, label, 1)
        del plotter, histo

    diff = pipifit * pifit
    for d in diff.data:
        print(d.shape)

if __name__ == '__main__':
    try:
        print("starting")
        main()
    except KeyboardInterrupt:
        pass
