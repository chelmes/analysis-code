#!/hadron/knippsch/Enthought/Canopy_64bit/User/bin/python

import sys
import numpy as np
import analysis2 as ana

def main():
####################################################
# parse the input file and setup parameters
#####################################################
    if len(sys.argv) < 2:
        ens = ana.LatticeEnsemble.parse("kk_I1_TP0_A40.24.ini")
    else:
        ens = ana.LatticeEnsemble.parse(sys.argv[1])

    # read settings
    readsingledata = False
    readsinglefit = False
    plotsingle = True
    readtwodata = False
    readtwofit = False
    plottwo = True

    # get data from input file
    prefix = ens.get_data("path")
    print prefix
    lat = ens.name()
    nboot = ens.get_data("nboot")
    datadir = ens.get_data("datadir")
    plotdir = ens.get_data("plotdir")
    gmax = ens.get_data("gmax")
    d2 = ens.get_data("d2")
    try:
        debug = ens.get_data("debug")
    except KeyError:
        debug = 0
    T = ens.T()
    T2 = ens.T2()
    addT = np.ones((nboot,)) * T
    addT2 = np.ones((nboot,)) * T2

    # set up fit ranges (t_m is for mass, t_r for ratio)
    t_mass = np.int_(ens.get_data("fitmass"))
    if isinstance(t_mass[0],int):
      print(t_mass)
    t_ratio = np.int_(ens.get_data("fitratio"))
    min_size_mass = ens.get_data("tmin_mass")
    min_size_ratio = ens.get_data("tmin_ratio")

#######################################################################
# Begin calculation
#######################################################################

    # single particle correlator
    print("read single particle corrs")
    #files = ["%s/pi_corr_p%d.dat" % (prefix, d) for d in range(4)]
    files = ["%s/k_charged_p%d.dat" % (datadir, d) for d in range(1)]
    if readsingledata == False:
        picorr = ana.Correlators(files, matrix=False)
        print(picorr.data)
        picorr.sym_and_boot(nboot)
        #picorr.symmetrize()
        print(picorr.shape)
        picorr.save("%s/corr_k_%s.npy" % (datadir, lat))
    else:
        picorr = ana.Correlators.read("%s/corr_k_%s.npy" % (datadir, lat))

    fit_single = ana.LatticeFit(0, dt_i=1, dt_f=-1, dt=min_size_mass)
    if readsinglefit == False:
        print("fitting")
        pifit = fit_single.fit(None, picorr, [t_mass], corrid="epi", add=addT)
        #pifit.save("%s/fit_pi_%s.npz" % (datadir, lat))
        pifit.save("%s/fit_k_%s.npz" % (datadir, lat))
    else:
        pifit = ana.FitResult.read("%s/fit_k_%s.npz" % (datadir, lat))
    print(pifit.data[0].shape)
    pifit.print_data(1)
    print(pifit.weight[0])

    # Prepare median of single correlator fit as input to ratiofit
    collapsed = pifit.singularize()

    # plot the result
    if plotsingle:
        print("plotting")
        plotter = ana.LatticePlot("%s/fit_k_%s.pdf" % (plotdir, lat))
        plotter.set_env(ylog=True)
        label = ["single particle", "t", "C(t)", "kaon"]
        plotter.plot(picorr, label, pifit, fit_single, add=addT, debug=debug)
        plotter.new_file("%s/hist_fit_k_%s.pdf" % (plotdir, lat))
        label = ["kaon energy", "E$_\k$/a", "E$_\k$"]
        range_mk, r_mk_shape = pifit.get_ranges()
        nbins = r_mk_shape[0][0]/3.
        plotter.histogram(pifit, label, nb_bins=nbins, par=1)
        del plotter

    # two particle correlator
    print("read two particle corrs")
    #files = ["%s/kk_charged_A1_TP%d_%d%d.dat" % (datadir, d2, i, j) for i in\
    #    range(gmax+1) for j in range(gmax+1)]
    files = ["%s/kk_charged_A1_TP%d_%d%d.dat" % (datadir, d2, i, j) for i in\
        range(gmax+1) for j in range(gmax+1)]
    print files
    if readtwodata == False:
        kkcorr = ana.Correlators(files, matrix=False)
        kkcorr.sym_and_boot(nboot)
        #kkcorr.symmetrize(nboot)
        if d2 != 0:
            pifit.calc_error()
            # for pifit.error the indices are the following:
            # * parameter
            # * mean, statistic err., systematic err., num of fits
            # * correlator number
            # TODO: wrong dE calculated
            dE = pifit.error[1][0][1] - pifit.error[1][0][0]
            kkcorr.shift(1, dE=dE)
        else:
            pass
        ratio = kkcorr.ratio(picorr, ratio=2 )
        kkcorr.save("%s/corr_kk_TP%d_%s.npy" % (datadir, d2, lat))
    else:
        kkcorr = ana.Correlators.read("%s/corr_kk_TP%d_%s.npy" % (datadir, d2, lat))
        ratio = kkcorr.ratio(picorr, ratio=2 )
    print(kkcorr.shape)

    fit_ratio = ana.LatticeFit(1, dt=min_size_ratio, dt_i=1, dt_f=1, xshift=0.5)
    start_ratio = [3., 1.]
    # ratiofit
    if readtwofit == False:
        print("fitting")
        ratiofit = fit_ratio.fit(start_ratio, ratio, [t_ratio],
                corrid="R", add=addT, oldfit=collapsed, oldfitpar=1)
        ratiofit.save("%s/fit_kk_TP%d_%s.npz" % (datadir, d2, lat))
    else:
        ratiofit = ana.FitResult.read("%s/fit_kk_TP%d_%s.npz" % (datadir,
            d2, lat))
    ratiofit.print_data(0)
    ratiofit.print_data(1)
    print(ratiofit.weight[1][0])
    if plottwo:
        print("plotting")
        plotter = ana.LatticePlot("%s/fit_ratio_kk_TP%d_%s.pdf" % (plotdir, d2, lat))
        plotter.set_env(ylog=False)
        label = ["Ratio", "t", "R(t)", "data"]
        print "plotter set up"
        plotter.plot(ratio, label, ratiofit, fit_ratio, oldfit=pifit, add=addT,
           oldfitpar=1, xshift=0.5, debug=debug)
        print "open new file for deltaE"
        plotter.new_file("%s/hist_fit_kk_ratio_TP%d_%s.pdf" % (plotdir, d2, lat))
        label = ["ratio", "dE$_{KK}$/a", "dE$_{KK}$"]
        # Number of bins is last parameter fit ranges of 0th correlator divided
        # by 3
        range_r, r_r_shape = ratiofit.get_ranges()
        nbins = r_r_shape[1][0]/3.
        plotter.histogram(ratiofit, label, nb_bins=nbins, par=1)
        del plotter

if __name__ == '__main__':
    try:
        print("starting")
        main()
    except KeyboardInterrupt:
        pass
