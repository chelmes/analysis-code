#!/hadron/knippsch/Enthought/Canopy_64bit/User/bin/python
# This fit script is for error analysis and tryouts, DO NOT USE for PRODUCTION
import sys
import numpy as np
import analysis2 as ana


def main():
# Parse input parameters
    if len(sys.argv) < 2:
        ens = ana.LatticeEnsemble.parse("kk_I1_TP0_A40.24.ini")
    else:
        ens = ana.LatticeEnsemble.parse(sys.argv[1])
    # get data from input file
    prefix = ens.get_data("path")
    print prefix
    lat = ens.name()
    nboot = ens.get_data("nboot")
    datadir = ens.get_data("datadir")
    plotdir = ens.get_data("plotdir")
    gmax = ens.get_data("gmax")
    d2 = ens.get_data("d2")
    try:
        debug = ens.get_data("debug")
    except KeyError:
        debug = 2
    T = ens.T()
    T2 = ens.T2()
    addT = np.ones((nboot,)) * T
    addT2 = np.ones((nboot,)) * T2

# read in 2pt correlators
    kcorr = ana.Correlators.read("%s/corr_k_%s.npy" % (datadir, lat)) 
# read in 4pt correlators
    kkcorr = ana.Correlators.read("%s/corr_kk_TP%d_%s.npy" % (datadir, d2, lat))
# construct ratio
    ratio = kkcorr.ratio(kcorr, ratio=2 )
    print(ratio.data[0])
## fit 2pt for one range
#    print("fit single")
#    fit_single = ana.LatticeFit(0, True)
#    start_single = [1., 0.3]
#    kfit = fit_single.fit(start_single, kcorr, [8,32], corrid="ek",
#            add=addT, min_size=25, step=1, debug=debug)
## fit ratio for one range
#    print("fit ratio")
#    fit_ratio = ana.LatticeFit(1, True)
#    start_ratio = [3., 1.]
#    ratiofit = fit_ratio.fit(start_ratio, ratio, [12,32],
#                corrid="R", add=addT, oldfit=kfit, oldfitpar=1, xshift=0.5, debug=debug,
#                min_size=21, step=1)
#    print ratiofit.data[0][:,1].shape
# plot covariance function
    
    plotter = ana.LatticePlot("%s/covariance_heatmap_ratio_%s.pdf" % (plotdir,lat))
    #label = [r"$Cov_{ij}$ of $R(t_i)$ with $R(t_j)$",['i','j']]
    #plotter.cov_plot(ratio.data[:,:,0].T, label, cut=False, inverse=False,
    #    norm=False)
    #label = [r"$(Cov_{ij})^{-1}$ of $R(t_i)$ with $R(t_j)$",['i','j']]
    #plotter.cov_plot(ratio.data[:,:,0].T, label, cut=False, inverse=True,
    #    norm=False)
    #label = [r"$(Cov_{ij}/\sqrt{Cov_{ii}Cov_{jj}})^{-1}$ of $R(t_i)$ with $R(t_j)$",['i','j']]
    #plotter.cov_plot(ratio.data[:,:,0].T, label, cut=False, inverse=True,
    #    norm=True)
    #label = [r"$Cov_{ij}/\sqrt{Cov_{ii}Cov_{jj}}$ of $R(t_i)$ with $R(t_j)$",['i','j']]
    #plotter.cov_plot(ratio.data[:,:,0].T, label, cut=False, inverse=False,
    #    norm=True)
    label = [r"$Cov_{ij}*R(t_i)*R(t_j)$ of $R(t_i)$ with $R(t_j)$",['i','j']]
    plotter.cov_plot(ratio.data[:,:,0].T, label, cut=False, inverse=False,
        norm=True)
    label = [r"$(Cov_{ij}*R(t_i)*R(t_j))^{-1}$ of $R(t_i)$ with $R(t_j)$",['i','j']]
    plotter.cov_plot(ratio.data[:,:,0].T, label, cut=False, inverse=True,
        norm=True)
    #plotter.new_file("%s/corrcoeff_heatmap_ratio_%s.pdf" % (plotdir,lat))
    #label = [r"$(Cov_{ij}/\sqrt{Cov_{ii}Cov_{jj}})^{-1}$ of $R(t_i)$ with $R(t_j)$",['i','j']]
    #plotter.corr_plot(ratio.data[:,:,0].T, label,inverse=True)
    #label = [r"$Cov_{ij}/\sqrt{Cov_{ii}Cov_{jj}}$ of $R(t_i)$ with $R(t_j)$",['i','j']]
    #plotter.corr_plot(ratio.data[:,:,0].T, label,inverse=False)
    #plotter.new_file("%s/cov_heatmap_2pt_%s.pdf" % (plotdir, lat))
    #plotter.cov_plot(kcorr.data[:,:,0].T,label)
    #plotter.new_file("%s/cov_heatmap_4pt_%s.pdf" % (plotdir, lat))
    #plotter.cov_plot(kkcorr.data[:,:,0].T,label)
    del plotter

if __name__ == '__main__':
    try:
        print("starting")
        main()
    except KeyboardInterrupt:
        pass
