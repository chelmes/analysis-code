#!/hadron/knippsch/Enthought/Canopy_64bit/User/bin/python
#!/usr/bin/python2

import sys
import numpy as np

import analysis2 as ana

def main():
    # parse the input file
    if len(sys.argv) < 2:
        ens = ana.LatticeEnsemble.parse("A40.24.ini")
    else:
        ens = ana.LatticeEnsemble.parse(sys.argv[1])

    # get data from input file
    lat = ens.name()
    L = ens.L()
    datadir = "/".join((ens.get_data("datadir"), lat))
    plotdir = "/".join((ens.get_data("plotdir"), lat))
    #datadir = ens.get_data("datadir")
    #plotdir = ens.get_data("plotdir")
    d2 = ens.get_data("d2")
    d = ens.get_data("d")
    try:
        debug = ens.get_data("debug")
    except KeyError:
        debug = 0
    try:
        irrep = ens.get_data("irrep")
    except KeyError:
        irrep = "A1"
    if irrep == "A1":
        suffix = "TP%d.npz" % d2
    else:
        suffix = "TP%d_%s.npz" % (d2, irrep)

    # single particle correlator
    print("read single particle corrs")
    picorr = ana.Correlators.read("%s/corr_pi.npy" % (datadir))
    pifit = ana.FitResult.read("%s/fit_pi.npz" % (datadir))
    #pifit.print_data(1)
    #pifit.print_details()

    # two particle correlator
    #print("\n\nread four point function")
    #print(datadir)
    pipifit = ana.FitResult.read("%s/fit_pipi_%s" % (datadir, suffix))
    #pipifit.print_data(1)
    #pipifit.print_details()

    calcEcm = True
    calcq2 = True
    calcdelta = True

    if calcEcm:
        Ecm = pipifit.to_CM(1, L=L, d=d)
        Ecm.save("%s/Ecm_%s" % (datadir, suffix))
    else:
        Ecm = ana.FitResult.read("%s/Ecm_%s" % (datadir, suffix))
    Ecm.print_data()
    #Ecm.print_details()

    if calcq2:
        if d2 != 0:
            q2 = Ecm.calc_momentum(pifit, parmass=1, L=L,
                uselattice=False, isdependend=True)
        else:
            q2 = Ecm.calc_momentum(pifit, parmass=1, L=L,
                uselattice=False)
        q2.save("%s/q2_%s" % (datadir, suffix))
    else:
        q2 = ana.FitResult.read("%s/q2_%s" % (datadir, suffix))
    q2.print_data()
    #q2.print_details()

    if calcdelta:
        print("testing calc")
        # need Ecm because of the Lorentz boost
        if d2 != 0:
            delta, cotdelta = q2.calc_cot_delta(Ecm, L=L, isdependend=True,
                d2=d2, irrep=irrep)
        else:
            delta, cotdelta = q2.calc_cot_delta(Ecm, L=L, isdependend=False,
                d2=d2, irrep=irrep)
        delta.save("%s/delta_%s" % (datadir, suffix))
        cotdelta.save("%s/cotdelta_%s" % (datadir, suffix))
    else:
        delta = ana.FitResult.read("%s/delta_%s" % (datadir, suffix))
        cotdelta = ana.FitResult.read("%s/cotdelta_%s" % (datadir, suffix))
    cotdelta.print_data()
    #cotdelta.print_details()
    delta.print_data()
    #delta.print_details()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
