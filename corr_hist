#!/hadron/knippsch/Enthought/Canopy_64bit/User/bin/python

# Script to plot the effective masses and the ratio

import sys
import numpy as np
import analysis2 as ana

def main():
####################################################
# parse the input file and setup parameters
#####################################################
    if len(sys.argv) < 2:
        ens = ana.LatticeEnsemble.parse("kk_I1_TP0_A40.24.ini")
    else:
        ens = ana.LatticeEnsemble.parse(sys.argv[1])

    # read settings
    readsingledata = False
    plotsingle = True
    readtwodata = False
    plottwo = False
    compare = True
    # get data from input file
    lat = ens.name()
    nboot = ens.get_data("nboot")
    datadir = ens.get_data("datadir")
    plotdir = ens.get_data("plotdir")
    gmax = ens.get_data("gmax")
    d2 = ens.get_data("d2")
    try:
        debug = ens.get_data("debug")
    except KeyError:
        debug = 0
    T = ens.T()
    T2 = ens.T2()
    addT = np.ones((nboot,)) * T
    addT2 = np.ones((nboot,)) * T2


#######################################################################
# Begin calculation
#######################################################################
   
    # single particle correlator
    print("read single particle corrs")
    files = ["%s/pi_charged.dat" % (datadir)]
    #files = ["%s/k_charged_p%d.dat" % (datadir, d) for d in range(1)]
    if readsingledata == False:
        kcorr = ana.Correlators(files, matrix=False, conf_col=3)
        print(kcorr.data)
        #kcorr.sym_and_boot(nboot)
        print(kcorr.shape)
        kcorr.save("%s/corr_pi_%s.npy" % (datadir, lat))
    else:
        kcorr = ana.Correlators.read("%s/corr_pi%s.npy" % (datadir, lat))

    ## two particle correlator
    #print("read two particle corrs")
    ##files = ["%s/kk_charged_A1_TP%d_%d%d.dat" % (datadir, d2, i, j) for i in\
    ##    range(gmax+1) for j in range(gmax+1)]
    #files = ["%s/kk_charged_A1_TP%d_%d%d.dat" % (datadir, d2, i, j) for i in\
    #    range(gmax+1) for j in range(gmax+1)]
    #print files
    #if readtwodata == False:
    #    kkcorr = ana.Correlators(files, matrix=False, conf_col=3)
    #    kkshifted = kkcorr.back_derivative()
    #    kkshifted.bootstrap(nboot)
    #    kkshifted.reflect(kind="point")
    #    kkcorr.sym_and_boot(nboot)
    #    #kkcorr.bootstrap(nboot)
    #    #kkcorr.symmetrize(nboot)
    #    ratio = kkcorr.ratio(kcorr, ratio=2 )
    #    kkcorr.save("%s/corr_kk_TP%d_%s.npy" % (datadir, d2, lat))
    #else:
    #    kkcorr = ana.Correlators.read("%s/corr_kk_TP%d_%s.npy" % (datadir, d2, lat))
    #    ratio = kkcorr.ratio(kcorr, ratio=2 )


    #plot history of corr
    if plotsingle:
        print("plotting")
        plotter = ana.LatticePlot("%s/outlier_corr_hist.pdf" % (plotdir))
        print("Plotting to file %s/outlier_corr_hist.pdf" % (plotdir))
        for ts in range(T):
            label=['2pt Configuration History', 'cnfg', r'$C(%d)$' % ts,r'$C_2$']
            plotter.history(kcorr,label,ts,boot=False)
        del plotter
if __name__ == '__main__':
    try:
        print("starting")
        main()
    except KeyboardInterrupt:
        pass

